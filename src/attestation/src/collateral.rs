// Copyright (c) 2022 Intel Corporation
//
// SPDX-License-Identifier: BSD-2-Clause-Patent

// This module is only compiled for AzCVMEmu mode
#![cfg(feature = "AzCVMEmu")]

use std::sync::{Mutex, Once};
use std::ptr;
use std::mem::size_of;
use std::fs;
use std::path::Path;
use serde::Deserialize;

/// TOML structure for collateral configuration
#[derive(Deserialize, Debug)]
pub struct CollateralConfig {
    pub major_version: Option<u16>,
    pub minor_version: Option<u16>,
    pub pck_crl_issuer_chain: String,
    pub root_ca_crl: String,
    pub pck_crl_size: Option<u32>, // Optional size field from TOML
    pub pck_crl: String,
    pub tcb_info_issuer_chain: String,
    pub tcb_info: String,
    pub qe_identity_issuer_chain: String,
    pub qe_identity: String,
}

/// Hardcoded collateral data that will be loaded into the global storage
const HARDCODED_COLLATERAL: [u8; 13543] = [
    0x03, 0x00, 0x00, 0x00, 0x71, 0x07, 0x00, 0x00,
    0xc0, 0x01, 0x00, 0x00, 0x49, 0x0e, 0x00, 0x00,
    0x65, 0x07, 0x00, 0x00, 0x12, 0x0c, 0x00, 0x00,
    0x65, 0x07, 0x00, 0x00, 0x71, 0x02, 0x00, 0x00,
    0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47,
    0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49,
    0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d,
    0x2d, 0x2d, 0x2d, 0x0a, 0x4d, 0x49, 0x49, 0x43,
    0x6c, 0x6a, 0x43, 0x43, 0x41, 0x6a, 0x32, 0x67,
    0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x56,
    0x41, 0x4a, 0x56, 0x76, 0x58, 0x63, 0x32, 0x39,
    0x47, 0x2b, 0x48, 0x70, 0x51, 0x45, 0x6e, 0x4a,
    0x31, 0x50, 0x51, 0x7a, 0x7a, 0x67, 0x46, 0x58,
    0x43, 0x39, 0x35, 0x55, 0x4d, 0x41, 0x6f, 0x47,
    0x43, 0x43, 0x71, 0x47, 0x53, 0x4d, 0x34, 0x39,
    0x42, 0x41, 0x4d, 0x43, 0x0a, 0x4d, 0x47, 0x67,
    0x78, 0x47, 0x6a, 0x41, 0x59, 0x42, 0x67, 0x4e,
    0x56, 0x42, 0x41, 0x4d, 0x4d, 0x45, 0x55, 0x6c,
    0x75, 0x64, 0x47, 0x56, 0x73, 0x49, 0x46, 0x4e,
    0x48, 0x57, 0x43, 0x42, 0x53, 0x62, 0x32, 0x39,
    0x30, 0x49, 0x45, 0x4e, 0x42, 0x4d, 0x52, 0x6f,
    0x77, 0x47, 0x41, 0x59, 0x44, 0x56, 0x51, 0x51,
    0x4b, 0x44, 0x42, 0x46, 0x4a, 0x62, 0x6e, 0x52,
    0x6c, 0x62, 0x43, 0x42, 0x44, 0x0a, 0x62, 0x33,
    0x4a, 0x77, 0x62, 0x33, 0x4a, 0x68, 0x64, 0x47,
    0x6c, 0x76, 0x62, 0x6a, 0x45, 0x55, 0x4d, 0x42,
    0x49, 0x47, 0x41, 0x31, 0x55, 0x45, 0x42, 0x77,
    0x77, 0x4c, 0x55, 0x32, 0x46, 0x75, 0x64, 0x47,
    0x45, 0x67, 0x51, 0x32, 0x78, 0x68, 0x63, 0x6d,
    0x45, 0x78, 0x43, 0x7a, 0x41, 0x4a, 0x42, 0x67,
    0x4e, 0x56, 0x42, 0x41, 0x67, 0x4d, 0x41, 0x6b,
    0x4e, 0x42, 0x4d, 0x51, 0x73, 0x77, 0x0a, 0x43,
    0x51, 0x59, 0x44, 0x56, 0x51, 0x51, 0x47, 0x45,
    0x77, 0x4a, 0x56, 0x55, 0x7a, 0x41, 0x65, 0x46,
    0x77, 0x30, 0x78, 0x4f, 0x44, 0x41, 0x31, 0x4d,
    0x6a, 0x45, 0x78, 0x4d, 0x44, 0x55, 0x77, 0x4d,
    0x54, 0x42, 0x61, 0x46, 0x77, 0x30, 0x7a, 0x4d,
    0x7a, 0x41, 0x31, 0x4d, 0x6a, 0x45, 0x78, 0x4d,
    0x44, 0x55, 0x77, 0x4d, 0x54, 0x42, 0x61, 0x4d,
    0x48, 0x41, 0x78, 0x49, 0x6a, 0x41, 0x67, 0x0a,
    0x42, 0x67, 0x4e, 0x56, 0x42, 0x41, 0x4d, 0x4d,
    0x47, 0x55, 0x6c, 0x75, 0x64, 0x47, 0x56, 0x73,
    0x49, 0x46, 0x4e, 0x48, 0x57, 0x43, 0x42, 0x51,
    0x51, 0x30, 0x73, 0x67, 0x55, 0x47, 0x78, 0x68,
    0x64, 0x47, 0x5a, 0x76, 0x63, 0x6d, 0x30, 0x67,
    0x51, 0x30, 0x45, 0x78, 0x47, 0x6a, 0x41, 0x59,
    0x42, 0x67, 0x4e, 0x56, 0x42, 0x41, 0x6f, 0x4d,
    0x45, 0x55, 0x6c, 0x75, 0x64, 0x47, 0x56, 0x73,
    0x0a, 0x49, 0x45, 0x4e, 0x76, 0x63, 0x6e, 0x42,
    0x76, 0x63, 0x6d, 0x46, 0x30, 0x61, 0x57, 0x39,
    0x75, 0x4d, 0x52, 0x51, 0x77, 0x45, 0x67, 0x59,
    0x44, 0x56, 0x51, 0x51, 0x48, 0x44, 0x41, 0x74,
    0x54, 0x59, 0x57, 0x35, 0x30, 0x59, 0x53, 0x42,
    0x44, 0x62, 0x47, 0x46, 0x79, 0x59, 0x54, 0x45,
    0x4c, 0x4d, 0x41, 0x6b, 0x47, 0x41, 0x31, 0x55,
    0x45, 0x43, 0x41, 0x77, 0x43, 0x51, 0x30, 0x45,
    0x78, 0x0a, 0x43, 0x7a, 0x41, 0x4a, 0x42, 0x67,
    0x4e, 0x56, 0x42, 0x41, 0x59, 0x54, 0x41, 0x6c,
    0x56, 0x54, 0x4d, 0x46, 0x6b, 0x77, 0x45, 0x77,
    0x59, 0x48, 0x4b, 0x6f, 0x5a, 0x49, 0x7a, 0x6a,
    0x30, 0x43, 0x41, 0x51, 0x59, 0x49, 0x4b, 0x6f,
    0x5a, 0x49, 0x7a, 0x6a, 0x30, 0x44, 0x41, 0x51,
    0x63, 0x44, 0x51, 0x67, 0x41, 0x45, 0x4e, 0x53,
    0x42, 0x2f, 0x37, 0x74, 0x32, 0x31, 0x6c, 0x58,
    0x53, 0x4f, 0x0a, 0x32, 0x43, 0x75, 0x7a, 0x70,
    0x78, 0x77, 0x37, 0x34, 0x65, 0x4a, 0x42, 0x37,
    0x32, 0x45, 0x79, 0x44, 0x47, 0x67, 0x57, 0x35,
    0x72, 0x58, 0x43, 0x74, 0x78, 0x32, 0x74, 0x56,
    0x54, 0x4c, 0x71, 0x36, 0x68, 0x4b, 0x6b, 0x36,
    0x7a, 0x2b, 0x55, 0x69, 0x52, 0x5a, 0x43, 0x6e,
    0x71, 0x52, 0x37, 0x70, 0x73, 0x4f, 0x76, 0x67,
    0x71, 0x46, 0x65, 0x53, 0x78, 0x6c, 0x6d, 0x54,
    0x6c, 0x4a, 0x6c, 0x0a, 0x65, 0x54, 0x6d, 0x69,
    0x32, 0x57, 0x59, 0x7a, 0x33, 0x71, 0x4f, 0x42,
    0x75, 0x7a, 0x43, 0x42, 0x75, 0x44, 0x41, 0x66,
    0x42, 0x67, 0x4e, 0x56, 0x48, 0x53, 0x4d, 0x45,
    0x47, 0x44, 0x41, 0x57, 0x67, 0x42, 0x51, 0x69,
    0x5a, 0x51, 0x7a, 0x57, 0x57, 0x70, 0x30, 0x30,
    0x69, 0x66, 0x4f, 0x44, 0x74, 0x4a, 0x56, 0x53,
    0x76, 0x31, 0x41, 0x62, 0x4f, 0x53, 0x63, 0x47,
    0x72, 0x44, 0x42, 0x53, 0x0a, 0x42, 0x67, 0x4e,
    0x56, 0x48, 0x52, 0x38, 0x45, 0x53, 0x7a, 0x42,
    0x4a, 0x4d, 0x45, 0x65, 0x67, 0x52, 0x61, 0x42,
    0x44, 0x68, 0x6b, 0x46, 0x6f, 0x64, 0x48, 0x52,
    0x77, 0x63, 0x7a, 0x6f, 0x76, 0x4c, 0x32, 0x4e,
    0x6c, 0x63, 0x6e, 0x52, 0x70, 0x5a, 0x6d, 0x6c,
    0x6a, 0x59, 0x58, 0x52, 0x6c, 0x63, 0x79, 0x35,
    0x30, 0x63, 0x6e, 0x56, 0x7a, 0x64, 0x47, 0x56,
    0x6b, 0x63, 0x32, 0x56, 0x79, 0x0a, 0x64, 0x6d,
    0x6c, 0x6a, 0x5a, 0x58, 0x4d, 0x75, 0x61, 0x57,
    0x35, 0x30, 0x5a, 0x57, 0x77, 0x75, 0x59, 0x32,
    0x39, 0x74, 0x4c, 0x30, 0x6c, 0x75, 0x64, 0x47,
    0x56, 0x73, 0x55, 0x30, 0x64, 0x59, 0x55, 0x6d,
    0x39, 0x76, 0x64, 0x45, 0x4e, 0x42, 0x4c, 0x6d,
    0x52, 0x6c, 0x63, 0x6a, 0x41, 0x64, 0x42, 0x67,
    0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67,
    0x51, 0x55, 0x6c, 0x57, 0x39, 0x64, 0x0a, 0x7a,
    0x62, 0x30, 0x62, 0x34, 0x65, 0x6c, 0x41, 0x53,
    0x63, 0x6e, 0x55, 0x39, 0x44, 0x50, 0x4f, 0x41,
    0x56, 0x63, 0x4c, 0x33, 0x6c, 0x51, 0x77, 0x44,
    0x67, 0x59, 0x44, 0x56, 0x52, 0x30, 0x50, 0x41,
    0x51, 0x48, 0x2f, 0x42, 0x41, 0x51, 0x44, 0x41,
    0x67, 0x45, 0x47, 0x4d, 0x42, 0x49, 0x47, 0x41,
    0x31, 0x55, 0x64, 0x45, 0x77, 0x45, 0x42, 0x2f,
    0x77, 0x51, 0x49, 0x4d, 0x41, 0x59, 0x42, 0x0a,
    0x41, 0x66, 0x38, 0x43, 0x41, 0x51, 0x41, 0x77,
    0x43, 0x67, 0x59, 0x49, 0x4b, 0x6f, 0x5a, 0x49,
    0x7a, 0x6a, 0x30, 0x45, 0x41, 0x77, 0x49, 0x44,
    0x52, 0x77, 0x41, 0x77, 0x52, 0x41, 0x49, 0x67,
    0x58, 0x73, 0x56, 0x6b, 0x69, 0x30, 0x77, 0x2b,
    0x69, 0x36, 0x56, 0x59, 0x47, 0x57, 0x33, 0x55,
    0x46, 0x2f, 0x32, 0x32, 0x75, 0x61, 0x58, 0x65,
    0x30, 0x59, 0x4a, 0x44, 0x6a, 0x31, 0x55, 0x65,
    0x0a, 0x6e, 0x41, 0x2b, 0x54, 0x6a, 0x44, 0x31,
    0x61, 0x69, 0x35, 0x63, 0x43, 0x49, 0x43, 0x59,
    0x62, 0x31, 0x53, 0x41, 0x6d, 0x44, 0x35, 0x78,
    0x6b, 0x66, 0x54, 0x56, 0x70, 0x76, 0x6f, 0x34,
    0x55, 0x6f, 0x79, 0x69, 0x53, 0x59, 0x78, 0x72,
    0x44, 0x57, 0x4c, 0x6d, 0x55, 0x52, 0x34, 0x43,
    0x49, 0x39, 0x4e, 0x4b, 0x79, 0x66, 0x50, 0x4e,
    0x2b, 0x0a, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45,
    0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49,
    0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d,
    0x2d, 0x2d, 0x2d, 0x0a, 0x2d, 0x2d, 0x2d, 0x2d,
    0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43,
    0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41,
    0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x0a,
    0x4d, 0x49, 0x49, 0x43, 0x6a, 0x7a, 0x43, 0x43,
    0x41, 0x6a, 0x53, 0x67, 0x41, 0x77, 0x49, 0x42,
    0x41, 0x67, 0x49, 0x55, 0x49, 0x6d, 0x55, 0x4d,
    0x31, 0x6c, 0x71, 0x64, 0x4e, 0x49, 0x6e, 0x7a,
    0x67, 0x37, 0x53, 0x56, 0x55, 0x72, 0x39, 0x51,
    0x47, 0x7a, 0x6b, 0x6e, 0x42, 0x71, 0x77, 0x77,
    0x43, 0x67, 0x59, 0x49, 0x4b, 0x6f, 0x5a, 0x49,
    0x7a, 0x6a, 0x30, 0x45, 0x41, 0x77, 0x49, 0x77,
    0x0a, 0x61, 0x44, 0x45, 0x61, 0x4d, 0x42, 0x67,
    0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x77, 0x77,
    0x52, 0x53, 0x57, 0x35, 0x30, 0x5a, 0x57, 0x77,
    0x67, 0x55, 0x30, 0x64, 0x59, 0x49, 0x46, 0x4a,
    0x76, 0x62, 0x33, 0x51, 0x67, 0x51, 0x30, 0x45,
    0x78, 0x47, 0x6a, 0x41, 0x59, 0x42, 0x67, 0x4e,
    0x56, 0x42, 0x41, 0x6f, 0x4d, 0x45, 0x55, 0x6c,
    0x75, 0x64, 0x47, 0x56, 0x73, 0x49, 0x45, 0x4e,
    0x76, 0x0a, 0x63, 0x6e, 0x42, 0x76, 0x63, 0x6d,
    0x46, 0x30, 0x61, 0x57, 0x39, 0x75, 0x4d, 0x52,
    0x51, 0x77, 0x45, 0x67, 0x59, 0x44, 0x56, 0x51,
    0x51, 0x48, 0x44, 0x41, 0x74, 0x54, 0x59, 0x57,
    0x35, 0x30, 0x59, 0x53, 0x42, 0x44, 0x62, 0x47,
    0x46, 0x79, 0x59, 0x54, 0x45, 0x4c, 0x4d, 0x41,
    0x6b, 0x47, 0x41, 0x31, 0x55, 0x45, 0x43, 0x41,
    0x77, 0x43, 0x51, 0x30, 0x45, 0x78, 0x43, 0x7a,
    0x41, 0x4a, 0x0a, 0x42, 0x67, 0x4e, 0x56, 0x42,
    0x41, 0x59, 0x54, 0x41, 0x6c, 0x56, 0x54, 0x4d,
    0x42, 0x34, 0x58, 0x44, 0x54, 0x45, 0x34, 0x4d,
    0x44, 0x55, 0x79, 0x4d, 0x54, 0x45, 0x77, 0x4e,
    0x44, 0x55, 0x78, 0x4d, 0x46, 0x6f, 0x58, 0x44,
    0x54, 0x51, 0x35, 0x4d, 0x54, 0x49, 0x7a, 0x4d,
    0x54, 0x49, 0x7a, 0x4e, 0x54, 0x6b, 0x31, 0x4f,
    0x56, 0x6f, 0x77, 0x61, 0x44, 0x45, 0x61, 0x4d,
    0x42, 0x67, 0x47, 0x0a, 0x41, 0x31, 0x55, 0x45,
    0x41, 0x77, 0x77, 0x52, 0x53, 0x57, 0x35, 0x30,
    0x5a, 0x57, 0x77, 0x67, 0x55, 0x30, 0x64, 0x59,
    0x49, 0x46, 0x4a, 0x76, 0x62, 0x33, 0x51, 0x67,
    0x51, 0x30, 0x45, 0x78, 0x47, 0x6a, 0x41, 0x59,
    0x42, 0x67, 0x4e, 0x56, 0x42, 0x41, 0x6f, 0x4d,
    0x45, 0x55, 0x6c, 0x75, 0x64, 0x47, 0x56, 0x73,
    0x49, 0x45, 0x4e, 0x76, 0x63, 0x6e, 0x42, 0x76,
    0x63, 0x6d, 0x46, 0x30, 0x0a, 0x61, 0x57, 0x39,
    0x75, 0x4d, 0x52, 0x51, 0x77, 0x45, 0x67, 0x59,
    0x44, 0x56, 0x51, 0x51, 0x48, 0x44, 0x41, 0x74,
    0x54, 0x59, 0x57, 0x35, 0x30, 0x59, 0x53, 0x42,
    0x44, 0x62, 0x47, 0x46, 0x79, 0x59, 0x54, 0x45,
    0x4c, 0x4d, 0x41, 0x6b, 0x47, 0x41, 0x31, 0x55,
    0x45, 0x43, 0x41, 0x77, 0x43, 0x51, 0x30, 0x45,
    0x78, 0x43, 0x7a, 0x41, 0x4a, 0x42, 0x67, 0x4e,
    0x56, 0x42, 0x41, 0x59, 0x54, 0x0a, 0x41, 0x6c,
    0x56, 0x54, 0x4d, 0x46, 0x6b, 0x77, 0x45, 0x77,
    0x59, 0x48, 0x4b, 0x6f, 0x5a, 0x49, 0x7a, 0x6a,
    0x30, 0x43, 0x41, 0x51, 0x59, 0x49, 0x4b, 0x6f,
    0x5a, 0x49, 0x7a, 0x6a, 0x30, 0x44, 0x41, 0x51,
    0x63, 0x44, 0x51, 0x67, 0x41, 0x45, 0x43, 0x36,
    0x6e, 0x45, 0x77, 0x4d, 0x44, 0x49, 0x59, 0x5a,
    0x4f, 0x6a, 0x2f, 0x69, 0x50, 0x57, 0x73, 0x43,
    0x7a, 0x61, 0x45, 0x4b, 0x69, 0x37, 0x0a, 0x31,
    0x4f, 0x69, 0x4f, 0x53, 0x4c, 0x52, 0x46, 0x68,
    0x57, 0x47, 0x6a, 0x62, 0x6e, 0x42, 0x56, 0x4a,
    0x66, 0x56, 0x6e, 0x6b, 0x59, 0x34, 0x75, 0x33,
    0x49, 0x6a, 0x6b, 0x44, 0x59, 0x59, 0x4c, 0x30,
    0x4d, 0x78, 0x4f, 0x34, 0x6d, 0x71, 0x73, 0x79,
    0x59, 0x6a, 0x6c, 0x42, 0x61, 0x6c, 0x54, 0x56,
    0x59, 0x78, 0x46, 0x50, 0x32, 0x73, 0x4a, 0x42,
    0x4b, 0x35, 0x7a, 0x6c, 0x4b, 0x4f, 0x42, 0x0a,
    0x75, 0x7a, 0x43, 0x42, 0x75, 0x44, 0x41, 0x66,
    0x42, 0x67, 0x4e, 0x56, 0x48, 0x53, 0x4d, 0x45,
    0x47, 0x44, 0x41, 0x57, 0x67, 0x42, 0x51, 0x69,
    0x5a, 0x51, 0x7a, 0x57, 0x57, 0x70, 0x30, 0x30,
    0x69, 0x66, 0x4f, 0x44, 0x74, 0x4a, 0x56, 0x53,
    0x76, 0x31, 0x41, 0x62, 0x4f, 0x53, 0x63, 0x47,
    0x72, 0x44, 0x42, 0x53, 0x42, 0x67, 0x4e, 0x56,
    0x48, 0x52, 0x38, 0x45, 0x53, 0x7a, 0x42, 0x4a,
    0x0a, 0x4d, 0x45, 0x65, 0x67, 0x52, 0x61, 0x42,
    0x44, 0x68, 0x6b, 0x46, 0x6f, 0x64, 0x48, 0x52,
    0x77, 0x63, 0x7a, 0x6f, 0x76, 0x4c, 0x32, 0x4e,
    0x6c, 0x63, 0x6e, 0x52, 0x70, 0x5a, 0x6d, 0x6c,
    0x6a, 0x59, 0x58, 0x52, 0x6c, 0x63, 0x79, 0x35,
    0x30, 0x63, 0x6e, 0x56, 0x7a, 0x64, 0x47, 0x56,
    0x6b, 0x63, 0x32, 0x56, 0x79, 0x64, 0x6d, 0x6c,
    0x6a, 0x5a, 0x58, 0x4d, 0x75, 0x61, 0x57, 0x35,
    0x30, 0x0a, 0x5a, 0x57, 0x77, 0x75, 0x59, 0x32,
    0x39, 0x74, 0x4c, 0x30, 0x6c, 0x75, 0x64, 0x47,
    0x56, 0x73, 0x55, 0x30, 0x64, 0x59, 0x55, 0x6d,
    0x39, 0x76, 0x64, 0x45, 0x4e, 0x42, 0x4c, 0x6d,
    0x52, 0x6c, 0x63, 0x6a, 0x41, 0x64, 0x42, 0x67,
    0x4e, 0x56, 0x48, 0x51, 0x34, 0x45, 0x46, 0x67,
    0x51, 0x55, 0x49, 0x6d, 0x55, 0x4d, 0x31, 0x6c,
    0x71, 0x64, 0x4e, 0x49, 0x6e, 0x7a, 0x67, 0x37,
    0x53, 0x56, 0x0a, 0x55, 0x72, 0x39, 0x51, 0x47,
    0x7a, 0x6b, 0x6e, 0x42, 0x71, 0x77, 0x77, 0x44,
    0x67, 0x59, 0x44, 0x56, 0x52, 0x30, 0x50, 0x41,
    0x51, 0x48, 0x2f, 0x42, 0x41, 0x51, 0x44, 0x41,
    0x67, 0x45, 0x47, 0x4d, 0x42, 0x49, 0x47, 0x41,
    0x31, 0x55, 0x64, 0x45, 0x77, 0x45, 0x42, 0x2f,
    0x77, 0x51, 0x49, 0x4d, 0x41, 0x59, 0x42, 0x41,
    0x66, 0x38, 0x43, 0x41, 0x51, 0x45, 0x77, 0x43,
    0x67, 0x59, 0x49, 0x0a, 0x4b, 0x6f, 0x5a, 0x49,
    0x7a, 0x6a, 0x30, 0x45, 0x41, 0x77, 0x49, 0x44,
    0x53, 0x51, 0x41, 0x77, 0x52, 0x67, 0x49, 0x68,
    0x41, 0x4f, 0x57, 0x2f, 0x35, 0x51, 0x6b, 0x52,
    0x2b, 0x53, 0x39, 0x43, 0x69, 0x53, 0x44, 0x63,
    0x4e, 0x6f, 0x6f, 0x77, 0x4c, 0x75, 0x50, 0x52,
    0x4c, 0x73, 0x57, 0x47, 0x66, 0x2f, 0x59, 0x69,
    0x37, 0x47, 0x53, 0x58, 0x39, 0x34, 0x42, 0x67,
    0x77, 0x54, 0x77, 0x67, 0x0a, 0x41, 0x69, 0x45,
    0x41, 0x34, 0x4a, 0x30, 0x6c, 0x72, 0x48, 0x6f,
    0x4d, 0x73, 0x2b, 0x58, 0x6f, 0x35, 0x6f, 0x2f,
    0x73, 0x58, 0x36, 0x4f, 0x39, 0x51, 0x57, 0x78,
    0x48, 0x52, 0x41, 0x76, 0x5a, 0x55, 0x47, 0x4f,
    0x64, 0x52, 0x51, 0x37, 0x63, 0x76, 0x71, 0x52,
    0x58, 0x61, 0x71, 0x49, 0x3d, 0x0a, 0x2d, 0x2d,
    0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43,
    0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41,
    0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x0a,
    0x00, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45,
    0x47, 0x49, 0x4e, 0x20, 0x58, 0x35, 0x30, 0x39,
    0x20, 0x43, 0x52, 0x4c, 0x2d, 0x2d, 0x2d, 0x2d,
    0x2d, 0x0a, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x44,
    0x43, 0x42, 0x79, 0x41, 0x49, 0x42, 0x41, 0x54,
    0x41, 0x4b, 0x42, 0x67, 0x67, 0x71, 0x68, 0x6b,
    0x6a, 0x4f, 0x50, 0x51, 0x51, 0x44, 0x41, 0x6a,
    0x42, 0x6f, 0x4d, 0x52, 0x6f, 0x77, 0x47, 0x41,
    0x59, 0x44, 0x56, 0x51, 0x51, 0x44, 0x44, 0x42,
    0x46, 0x4a, 0x62, 0x6e, 0x52, 0x6c, 0x62, 0x43,
    0x42, 0x54, 0x52, 0x31, 0x67, 0x67, 0x55, 0x6d,
    0x39, 0x76, 0x0a, 0x64, 0x43, 0x42, 0x44, 0x51,
    0x54, 0x45, 0x61, 0x4d, 0x42, 0x67, 0x47, 0x41,
    0x31, 0x55, 0x45, 0x43, 0x67, 0x77, 0x52, 0x53,
    0x57, 0x35, 0x30, 0x5a, 0x57, 0x77, 0x67, 0x51,
    0x32, 0x39, 0x79, 0x63, 0x47, 0x39, 0x79, 0x59,
    0x58, 0x52, 0x70, 0x62, 0x32, 0x34, 0x78, 0x46,
    0x44, 0x41, 0x53, 0x42, 0x67, 0x4e, 0x56, 0x42,
    0x41, 0x63, 0x4d, 0x43, 0x31, 0x4e, 0x68, 0x62,
    0x6e, 0x52, 0x68, 0x0a, 0x49, 0x45, 0x4e, 0x73,
    0x59, 0x58, 0x4a, 0x68, 0x4d, 0x51, 0x73, 0x77,
    0x43, 0x51, 0x59, 0x44, 0x56, 0x51, 0x51, 0x49,
    0x44, 0x41, 0x4a, 0x44, 0x51, 0x54, 0x45, 0x4c,
    0x4d, 0x41, 0x6b, 0x47, 0x41, 0x31, 0x55, 0x45,
    0x42, 0x68, 0x4d, 0x43, 0x56, 0x56, 0x4d, 0x58,
    0x44, 0x54, 0x49, 0x31, 0x4d, 0x44, 0x4d, 0x79,
    0x4d, 0x44, 0x45, 0x78, 0x4d, 0x6a, 0x45, 0x31,
    0x4e, 0x31, 0x6f, 0x58, 0x0a, 0x44, 0x54, 0x49,
    0x32, 0x4d, 0x44, 0x51, 0x77, 0x4d, 0x7a, 0x45,
    0x78, 0x4d, 0x6a, 0x45, 0x31, 0x4e, 0x31, 0x71,
    0x67, 0x4c, 0x7a, 0x41, 0x74, 0x4d, 0x41, 0x6f,
    0x47, 0x41, 0x31, 0x55, 0x64, 0x46, 0x41, 0x51,
    0x44, 0x41, 0x67, 0x45, 0x42, 0x4d, 0x42, 0x38,
    0x47, 0x41, 0x31, 0x55, 0x64, 0x49, 0x77, 0x51,
    0x59, 0x4d, 0x42, 0x61, 0x41, 0x46, 0x43, 0x4a,
    0x6c, 0x44, 0x4e, 0x5a, 0x61, 0x0a, 0x6e, 0x54,
    0x53, 0x4a, 0x38, 0x34, 0x4f, 0x30, 0x6c, 0x56,
    0x4b, 0x2f, 0x55, 0x42, 0x73, 0x35, 0x4a, 0x77,
    0x61, 0x73, 0x4d, 0x41, 0x6f, 0x47, 0x43, 0x43,
    0x71, 0x47, 0x53, 0x4d, 0x34, 0x39, 0x42, 0x41,
    0x4d, 0x43, 0x41, 0x30, 0x63, 0x41, 0x4d, 0x45,
    0x51, 0x43, 0x49, 0x44, 0x44, 0x4a, 0x2f, 0x4f,
    0x46, 0x44, 0x6a, 0x61, 0x43, 0x70, 0x54, 0x6b,
    0x2f, 0x2f, 0x33, 0x55, 0x62, 0x4a, 0x0a, 0x5a,
    0x51, 0x34, 0x35, 0x4f, 0x2b, 0x62, 0x6c, 0x70,
    0x34, 0x59, 0x74, 0x54, 0x6b, 0x35, 0x7a, 0x55,
    0x6e, 0x6b, 0x79, 0x30, 0x45, 0x72, 0x7a, 0x41,
    0x69, 0x42, 0x6c, 0x4f, 0x65, 0x2f, 0x6a, 0x39,
    0x7a, 0x54, 0x44, 0x31, 0x39, 0x38, 0x67, 0x32,
    0x64, 0x2f, 0x45, 0x59, 0x77, 0x34, 0x63, 0x66,
    0x2f, 0x42, 0x44, 0x6d, 0x67, 0x2b, 0x4f, 0x7a,
    0x68, 0x41, 0x66, 0x46, 0x62, 0x58, 0x71, 0x0a,
    0x2f, 0x35, 0x74, 0x50, 0x4d, 0x77, 0x3d, 0x3d,
    0x0a, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e,
    0x44, 0x20, 0x58, 0x35, 0x30, 0x39, 0x20, 0x43,
    0x52, 0x4c, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x0a,
    0x00, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45,
    0x47, 0x49, 0x4e, 0x20, 0x58, 0x35, 0x30, 0x39,
    0x20, 0x43, 0x52, 0x4c, 0x2d, 0x2d, 0x2d, 0x2d,
    0x2d, 0x0a, 0x4d, 0x49, 0x49, 0x4b, 0x59, 0x6a,
    0x43, 0x43, 0x43, 0x67, 0x67, 0x43, 0x41, 0x51,
    0x45, 0x77, 0x43, 0x67, 0x59, 0x49, 0x4b, 0x6f,
    0x5a, 0x49, 0x7a, 0x6a, 0x30, 0x45, 0x41, 0x77,
    0x49, 0x77, 0x63, 0x44, 0x45, 0x69, 0x4d, 0x43,
    0x41, 0x47, 0x41, 0x31, 0x55, 0x45, 0x41, 0x77,
    0x77, 0x5a, 0x53, 0x57, 0x35, 0x30, 0x5a, 0x57,
    0x77, 0x67, 0x55, 0x30, 0x64, 0x59, 0x49, 0x46,
    0x42, 0x44, 0x0a, 0x53, 0x79, 0x42, 0x51, 0x62,
    0x47, 0x46, 0x30, 0x5a, 0x6d, 0x39, 0x79, 0x62,
    0x53, 0x42, 0x44, 0x51, 0x54, 0x45, 0x61, 0x4d,
    0x42, 0x67, 0x47, 0x41, 0x31, 0x55, 0x45, 0x43,
    0x67, 0x77, 0x52, 0x53, 0x57, 0x35, 0x30, 0x5a,
    0x57, 0x77, 0x67, 0x51, 0x32, 0x39, 0x79, 0x63,
    0x47, 0x39, 0x79, 0x59, 0x58, 0x52, 0x70, 0x62,
    0x32, 0x34, 0x78, 0x46, 0x44, 0x41, 0x53, 0x42,
    0x67, 0x4e, 0x56, 0x0a, 0x42, 0x41, 0x63, 0x4d,
    0x43, 0x31, 0x4e, 0x68, 0x62, 0x6e, 0x52, 0x68,
    0x49, 0x45, 0x4e, 0x73, 0x59, 0x58, 0x4a, 0x68,
    0x4d, 0x51, 0x73, 0x77, 0x43, 0x51, 0x59, 0x44,
    0x56, 0x51, 0x51, 0x49, 0x44, 0x41, 0x4a, 0x44,
    0x51, 0x54, 0x45, 0x4c, 0x4d, 0x41, 0x6b, 0x47,
    0x41, 0x31, 0x55, 0x45, 0x42, 0x68, 0x4d, 0x43,
    0x56, 0x56, 0x4d, 0x58, 0x44, 0x54, 0x49, 0x31,
    0x4d, 0x44, 0x59, 0x79, 0x0a, 0x4e, 0x54, 0x45,
    0x32, 0x4d, 0x7a, 0x59, 0x79, 0x4d, 0x31, 0x6f,
    0x58, 0x44, 0x54, 0x49, 0x31, 0x4d, 0x44, 0x63,
    0x79, 0x4e, 0x54, 0x45, 0x32, 0x4d, 0x7a, 0x59,
    0x79, 0x4d, 0x31, 0x6f, 0x77, 0x67, 0x67, 0x6b,
    0x30, 0x4d, 0x44, 0x4d, 0x43, 0x46, 0x47, 0x2f,
    0x44, 0x54, 0x6c, 0x41, 0x6a, 0x35, 0x79, 0x69,
    0x53, 0x4e, 0x44, 0x58, 0x57, 0x47, 0x71, 0x53,
    0x34, 0x50, 0x47, 0x47, 0x42, 0x0a, 0x5a, 0x71,
    0x30, 0x31, 0x46, 0x77, 0x30, 0x79, 0x4e, 0x54,
    0x41, 0x32, 0x4d, 0x6a, 0x55, 0x78, 0x4e, 0x6a,
    0x4d, 0x32, 0x4d, 0x6a, 0x4e, 0x61, 0x4d, 0x41,
    0x77, 0x77, 0x43, 0x67, 0x59, 0x44, 0x56, 0x52,
    0x30, 0x56, 0x42, 0x41, 0x4d, 0x4b, 0x41, 0x51,
    0x45, 0x77, 0x4e, 0x41, 0x49, 0x56, 0x41, 0x4f,
    0x2b, 0x75, 0x62, 0x70, 0x63, 0x56, 0x2f, 0x4b,
    0x45, 0x37, 0x68, 0x2b, 0x4d, 0x7a, 0x0a, 0x36,
    0x43, 0x59, 0x65, 0x31, 0x74, 0x6d, 0x51, 0x71,
    0x53, 0x61, 0x74, 0x46, 0x77, 0x30, 0x79, 0x4e,
    0x54, 0x41, 0x32, 0x4d, 0x6a, 0x55, 0x78, 0x4e,
    0x6a, 0x4d, 0x32, 0x4d, 0x6a, 0x4e, 0x61, 0x4d,
    0x41, 0x77, 0x77, 0x43, 0x67, 0x59, 0x44, 0x56,
    0x52, 0x30, 0x56, 0x42, 0x41, 0x4d, 0x4b, 0x41,
    0x51, 0x45, 0x77, 0x4e, 0x41, 0x49, 0x56, 0x41,
    0x50, 0x31, 0x67, 0x68, 0x6b, 0x68, 0x69, 0x0a,
    0x6e, 0x4c, 0x70, 0x7a, 0x42, 0x34, 0x74, 0x4e,
    0x53, 0x53, 0x39, 0x4c, 0x50, 0x71, 0x64, 0x42,
    0x72, 0x51, 0x6a, 0x4e, 0x46, 0x77, 0x30, 0x79,
    0x4e, 0x54, 0x41, 0x32, 0x4d, 0x6a, 0x55, 0x78,
    0x4e, 0x6a, 0x4d, 0x32, 0x4d, 0x6a, 0x4e, 0x61,
    0x4d, 0x41, 0x77, 0x77, 0x43, 0x67, 0x59, 0x44,
    0x56, 0x52, 0x30, 0x56, 0x42, 0x41, 0x4d, 0x4b,
    0x41, 0x51, 0x45, 0x77, 0x4e, 0x41, 0x49, 0x56,
    0x0a, 0x41, 0x49, 0x72, 0x35, 0x4a, 0x42, 0x68,
    0x4f, 0x48, 0x56, 0x72, 0x39, 0x33, 0x58, 0x50,
    0x44, 0x31, 0x6a, 0x6f, 0x53, 0x39, 0x65, 0x69,
    0x31, 0x63, 0x33, 0x35, 0x57, 0x46, 0x77, 0x30,
    0x79, 0x4e, 0x54, 0x41, 0x32, 0x4d, 0x6a, 0x55,
    0x78, 0x4e, 0x6a, 0x4d, 0x32, 0x4d, 0x6a, 0x4e,
    0x61, 0x4d, 0x41, 0x77, 0x77, 0x43, 0x67, 0x59,
    0x44, 0x56, 0x52, 0x30, 0x56, 0x42, 0x41, 0x4d,
    0x4b, 0x0a, 0x41, 0x51, 0x45, 0x77, 0x4e, 0x41,
    0x49, 0x56, 0x41, 0x4c, 0x45, 0x6c, 0x65, 0x58,
    0x6a, 0x50, 0x71, 0x63, 0x7a, 0x64, 0x42, 0x31,
    0x6d, 0x72, 0x2b, 0x4d, 0x58, 0x4b, 0x63, 0x76,
    0x72, 0x6a, 0x70, 0x34, 0x71, 0x62, 0x46, 0x77,
    0x30, 0x79, 0x4e, 0x54, 0x41, 0x32, 0x4d, 0x6a,
    0x55, 0x78, 0x4e, 0x6a, 0x4d, 0x32, 0x4d, 0x6a,
    0x4e, 0x61, 0x4d, 0x41, 0x77, 0x77, 0x43, 0x67,
    0x59, 0x44, 0x0a, 0x56, 0x52, 0x30, 0x56, 0x42,
    0x41, 0x4d, 0x4b, 0x41, 0x51, 0x45, 0x77, 0x4d,
    0x77, 0x49, 0x55, 0x64, 0x50, 0x36, 0x6d, 0x46,
    0x4b, 0x6c, 0x79, 0x76, 0x67, 0x34, 0x6f, 0x51,
    0x2f, 0x49, 0x46, 0x6d, 0x44, 0x57, 0x42, 0x48,
    0x74, 0x68, 0x79, 0x2b, 0x62, 0x4d, 0x58, 0x44,
    0x54, 0x49, 0x31, 0x4d, 0x44, 0x59, 0x79, 0x4e,
    0x54, 0x45, 0x32, 0x4d, 0x7a, 0x59, 0x79, 0x4d,
    0x31, 0x6f, 0x77, 0x0a, 0x44, 0x44, 0x41, 0x4b,
    0x42, 0x67, 0x4e, 0x56, 0x48, 0x52, 0x55, 0x45,
    0x41, 0x77, 0x6f, 0x42, 0x41, 0x54, 0x41, 0x30,
    0x41, 0x68, 0x55, 0x41, 0x2b, 0x63, 0x54, 0x76,
    0x56, 0x72, 0x4f, 0x72, 0x53, 0x4e, 0x56, 0x33,
    0x34, 0x51, 0x69, 0x36, 0x37, 0x66, 0x53, 0x2f,
    0x69, 0x41, 0x46, 0x43, 0x46, 0x4c, 0x6b, 0x58,
    0x44, 0x54, 0x49, 0x31, 0x4d, 0x44, 0x59, 0x79,
    0x4e, 0x54, 0x45, 0x32, 0x0a, 0x4d, 0x7a, 0x59,
    0x79, 0x4d, 0x31, 0x6f, 0x77, 0x44, 0x44, 0x41,
    0x4b, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x52, 0x55,
    0x45, 0x41, 0x77, 0x6f, 0x42, 0x41, 0x54, 0x41,
    0x7a, 0x41, 0x68, 0x51, 0x48, 0x48, 0x65, 0x42,
    0x33, 0x6a, 0x35, 0x35, 0x66, 0x78, 0x50, 0x4b,
    0x48, 0x6a, 0x7a, 0x44, 0x57, 0x73, 0x48, 0x79,
    0x61, 0x4d, 0x4f, 0x61, 0x7a, 0x43, 0x78, 0x63,
    0x4e, 0x4d, 0x6a, 0x55, 0x77, 0x0a, 0x4e, 0x6a,
    0x49, 0x31, 0x4d, 0x54, 0x59, 0x7a, 0x4e, 0x6a,
    0x49, 0x7a, 0x57, 0x6a, 0x41, 0x4d, 0x4d, 0x41,
    0x6f, 0x47, 0x41, 0x31, 0x55, 0x64, 0x46, 0x51,
    0x51, 0x44, 0x43, 0x67, 0x45, 0x42, 0x4d, 0x44,
    0x51, 0x43, 0x46, 0x51, 0x44, 0x4e, 0x34, 0x6b,
    0x4a, 0x50, 0x6c, 0x79, 0x7a, 0x71, 0x6c, 0x50,
    0x38, 0x6a, 0x6d, 0x54, 0x66, 0x30, 0x32, 0x41,
    0x77, 0x6c, 0x41, 0x70, 0x33, 0x57, 0x0a, 0x43,
    0x78, 0x63, 0x4e, 0x4d, 0x6a, 0x55, 0x77, 0x4e,
    0x6a, 0x49, 0x31, 0x4d, 0x54, 0x59, 0x7a, 0x4e,
    0x6a, 0x49, 0x7a, 0x57, 0x6a, 0x41, 0x4d, 0x4d,
    0x41, 0x6f, 0x47, 0x41, 0x31, 0x55, 0x64, 0x46,
    0x51, 0x51, 0x44, 0x43, 0x67, 0x45, 0x42, 0x4d,
    0x44, 0x4d, 0x43, 0x46, 0x47, 0x77, 0x7a, 0x47,
    0x65, 0x55, 0x51, 0x6d, 0x32, 0x52, 0x51, 0x66,
    0x54, 0x7a, 0x78, 0x45, 0x79, 0x7a, 0x67, 0x0a,
    0x41, 0x30, 0x6e, 0x76, 0x55, 0x6e, 0x4d, 0x5a,
    0x46, 0x77, 0x30, 0x79, 0x4e, 0x54, 0x41, 0x32,
    0x4d, 0x6a, 0x55, 0x78, 0x4e, 0x6a, 0x4d, 0x32,
    0x4d, 0x6a, 0x4e, 0x61, 0x4d, 0x41, 0x77, 0x77,
    0x43, 0x67, 0x59, 0x44, 0x56, 0x52, 0x30, 0x56,
    0x42, 0x41, 0x4d, 0x4b, 0x41, 0x51, 0x45, 0x77,
    0x4e, 0x41, 0x49, 0x56, 0x41, 0x4e, 0x38, 0x49,
    0x31, 0x31, 0x61, 0x32, 0x61, 0x6e, 0x53, 0x58,
    0x0a, 0x39, 0x44, 0x74, 0x62, 0x74, 0x59, 0x72,
    0x61, 0x42, 0x4e, 0x50, 0x30, 0x39, 0x36, 0x6b,
    0x33, 0x46, 0x77, 0x30, 0x79, 0x4e, 0x54, 0x41,
    0x32, 0x4d, 0x6a, 0x55, 0x78, 0x4e, 0x6a, 0x4d,
    0x32, 0x4d, 0x6a, 0x4e, 0x61, 0x4d, 0x41, 0x77,
    0x77, 0x43, 0x67, 0x59, 0x44, 0x56, 0x52, 0x30,
    0x56, 0x42, 0x41, 0x4d, 0x4b, 0x41, 0x51, 0x45,
    0x77, 0x4d, 0x77, 0x49, 0x55, 0x4b, 0x4b, 0x39,
    0x49, 0x0a, 0x57, 0x32, 0x7a, 0x32, 0x66, 0x6b,
    0x43, 0x61, 0x4f, 0x64, 0x58, 0x4c, 0x57, 0x75,
    0x35, 0x46, 0x6d, 0x50, 0x65, 0x6f, 0x2b, 0x6e,
    0x73, 0x58, 0x44, 0x54, 0x49, 0x31, 0x4d, 0x44,
    0x59, 0x79, 0x4e, 0x54, 0x45, 0x32, 0x4d, 0x7a,
    0x59, 0x79, 0x4d, 0x31, 0x6f, 0x77, 0x44, 0x44,
    0x41, 0x4b, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x52,
    0x55, 0x45, 0x41, 0x77, 0x6f, 0x42, 0x41, 0x54,
    0x41, 0x30, 0x0a, 0x41, 0x68, 0x55, 0x41, 0x2b,
    0x34, 0x73, 0x74, 0x72, 0x73, 0x43, 0x53, 0x79,
    0x74, 0x71, 0x4b, 0x71, 0x62, 0x78, 0x50, 0x38,
    0x76, 0x48, 0x43, 0x44, 0x51, 0x4e, 0x47, 0x5a,
    0x6f, 0x77, 0x58, 0x44, 0x54, 0x49, 0x31, 0x4d,
    0x44, 0x59, 0x79, 0x4e, 0x54, 0x45, 0x32, 0x4d,
    0x7a, 0x59, 0x79, 0x4d, 0x31, 0x6f, 0x77, 0x44,
    0x44, 0x41, 0x4b, 0x42, 0x67, 0x4e, 0x56, 0x48,
    0x52, 0x55, 0x45, 0x0a, 0x41, 0x77, 0x6f, 0x42,
    0x41, 0x54, 0x41, 0x30, 0x41, 0x68, 0x55, 0x41,
    0x7a, 0x55, 0x68, 0x51, 0x72, 0x46, 0x4b, 0x39,
    0x7a, 0x47, 0x6d, 0x6d, 0x70, 0x76, 0x42, 0x59,
    0x79, 0x4c, 0x78, 0x58, 0x75, 0x39, 0x43, 0x31,
    0x2b, 0x47, 0x51, 0x58, 0x44, 0x54, 0x49, 0x31,
    0x4d, 0x44, 0x59, 0x79, 0x4e, 0x54, 0x45, 0x32,
    0x4d, 0x7a, 0x59, 0x79, 0x4d, 0x31, 0x6f, 0x77,
    0x44, 0x44, 0x41, 0x4b, 0x0a, 0x42, 0x67, 0x4e,
    0x56, 0x48, 0x52, 0x55, 0x45, 0x41, 0x77, 0x6f,
    0x42, 0x41, 0x54, 0x41, 0x30, 0x41, 0x68, 0x55,
    0x41, 0x6d, 0x55, 0x33, 0x54, 0x5a, 0x6d, 0x39,
    0x53, 0x64, 0x66, 0x75, 0x41, 0x58, 0x35, 0x58,
    0x64, 0x41, 0x72, 0x31, 0x51, 0x79, 0x79, 0x5a,
    0x35, 0x32, 0x4b, 0x30, 0x58, 0x44, 0x54, 0x49,
    0x31, 0x4d, 0x44, 0x59, 0x79, 0x4e, 0x54, 0x45,
    0x32, 0x4d, 0x7a, 0x59, 0x79, 0x0a, 0x4d, 0x31,
    0x6f, 0x77, 0x44, 0x44, 0x41, 0x4b, 0x42, 0x67,
    0x4e, 0x56, 0x48, 0x52, 0x55, 0x45, 0x41, 0x77,
    0x6f, 0x42, 0x41, 0x54, 0x41, 0x7a, 0x41, 0x68,
    0x51, 0x48, 0x41, 0x68, 0x4e, 0x70, 0x41, 0x43,
    0x55, 0x69, 0x64, 0x4e, 0x6b, 0x44, 0x58, 0x75,
    0x33, 0x31, 0x52, 0x58, 0x52, 0x69, 0x2b, 0x74,
    0x44, 0x76, 0x54, 0x42, 0x63, 0x4e, 0x4d, 0x6a,
    0x55, 0x77, 0x4e, 0x6a, 0x49, 0x31, 0x0a, 0x4d,
    0x54, 0x59, 0x7a, 0x4e, 0x6a, 0x49, 0x7a, 0x57,
    0x6a, 0x41, 0x4d, 0x4d, 0x41, 0x6f, 0x47, 0x41,
    0x31, 0x55, 0x64, 0x46, 0x51, 0x51, 0x44, 0x43,
    0x67, 0x45, 0x42, 0x4d, 0x44, 0x4d, 0x43, 0x46,
    0x47, 0x48, 0x79, 0x76, 0x33, 0x50, 0x6a, 0x6d,
    0x30, 0x34, 0x45, 0x71, 0x69, 0x66, 0x59, 0x41,
    0x62, 0x31, 0x7a, 0x30, 0x6b, 0x4d, 0x5a, 0x74,
    0x62, 0x2b, 0x41, 0x46, 0x77, 0x30, 0x79, 0x0a,
    0x4e, 0x54, 0x41, 0x32, 0x4d, 0x6a, 0x55, 0x78,
    0x4e, 0x6a, 0x4d, 0x32, 0x4d, 0x6a, 0x4e, 0x61,
    0x4d, 0x41, 0x77, 0x77, 0x43, 0x67, 0x59, 0x44,
    0x56, 0x52, 0x30, 0x56, 0x42, 0x41, 0x4d, 0x4b,
    0x41, 0x51, 0x45, 0x77, 0x4d, 0x77, 0x49, 0x55,
    0x4f, 0x5a, 0x4b, 0x2b, 0x68, 0x52, 0x75, 0x57,
    0x6b, 0x43, 0x37, 0x2f, 0x4f, 0x4a, 0x57, 0x65,
    0x62, 0x43, 0x37, 0x2f, 0x47, 0x77, 0x5a, 0x52,
    0x0a, 0x70, 0x4c, 0x55, 0x58, 0x44, 0x54, 0x49,
    0x31, 0x4d, 0x44, 0x59, 0x79, 0x4e, 0x54, 0x45,
    0x32, 0x4d, 0x7a, 0x59, 0x79, 0x4d, 0x31, 0x6f,
    0x77, 0x44, 0x44, 0x41, 0x4b, 0x42, 0x67, 0x4e,
    0x56, 0x48, 0x52, 0x55, 0x45, 0x41, 0x77, 0x6f,
    0x42, 0x41, 0x54, 0x41, 0x7a, 0x41, 0x68, 0x51,
    0x50, 0x32, 0x6b, 0x4f, 0x67, 0x43, 0x32, 0x6a,
    0x71, 0x65, 0x62, 0x66, 0x43, 0x33, 0x71, 0x36,
    0x73, 0x0a, 0x43, 0x30, 0x6d, 0x4c, 0x33, 0x37,
    0x4b, 0x76, 0x6b, 0x42, 0x63, 0x4e, 0x4d, 0x6a,
    0x55, 0x77, 0x4e, 0x6a, 0x49, 0x31, 0x4d, 0x54,
    0x59, 0x7a, 0x4e, 0x6a, 0x49, 0x7a, 0x57, 0x6a,
    0x41, 0x4d, 0x4d, 0x41, 0x6f, 0x47, 0x41, 0x31,
    0x55, 0x64, 0x46, 0x51, 0x51, 0x44, 0x43, 0x67,
    0x45, 0x42, 0x4d, 0x44, 0x4d, 0x43, 0x46, 0x47,
    0x4f, 0x66, 0x45, 0x35, 0x70, 0x51, 0x51, 0x50,
    0x33, 0x50, 0x0a, 0x38, 0x5a, 0x48, 0x6f, 0x70,
    0x50, 0x73, 0x62, 0x38, 0x49, 0x62, 0x74, 0x59,
    0x44, 0x6c, 0x78, 0x46, 0x77, 0x30, 0x79, 0x4e,
    0x54, 0x41, 0x32, 0x4d, 0x6a, 0x55, 0x78, 0x4e,
    0x6a, 0x4d, 0x32, 0x4d, 0x6a, 0x4e, 0x61, 0x4d,
    0x41, 0x77, 0x77, 0x43, 0x67, 0x59, 0x44, 0x56,
    0x52, 0x30, 0x56, 0x42, 0x41, 0x4d, 0x4b, 0x41,
    0x51, 0x45, 0x77, 0x4e, 0x41, 0x49, 0x56, 0x41,
    0x4a, 0x57, 0x64, 0x0a, 0x55, 0x7a, 0x2b, 0x53,
    0x53, 0x64, 0x77, 0x65, 0x55, 0x54, 0x56, 0x45,
    0x7a, 0x63, 0x67, 0x77, 0x76, 0x78, 0x6d, 0x33,
    0x38, 0x66, 0x4d, 0x42, 0x46, 0x77, 0x30, 0x79,
    0x4e, 0x54, 0x41, 0x32, 0x4d, 0x6a, 0x55, 0x78,
    0x4e, 0x6a, 0x4d, 0x32, 0x4d, 0x6a, 0x4e, 0x61,
    0x4d, 0x41, 0x77, 0x77, 0x43, 0x67, 0x59, 0x44,
    0x56, 0x52, 0x30, 0x56, 0x42, 0x41, 0x4d, 0x4b,
    0x41, 0x51, 0x45, 0x77, 0x0a, 0x4d, 0x77, 0x49,
    0x55, 0x65, 0x75, 0x4e, 0x33, 0x53, 0x4b, 0x6e,
    0x35, 0x45, 0x76, 0x54, 0x47, 0x4f, 0x36, 0x65,
    0x72, 0x42, 0x38, 0x57, 0x54, 0x7a, 0x68, 0x30,
    0x64, 0x45, 0x59, 0x45, 0x58, 0x44, 0x54, 0x49,
    0x31, 0x4d, 0x44, 0x59, 0x79, 0x4e, 0x54, 0x45,
    0x32, 0x4d, 0x7a, 0x59, 0x79, 0x4d, 0x31, 0x6f,
    0x77, 0x44, 0x44, 0x41, 0x4b, 0x42, 0x67, 0x4e,
    0x56, 0x48, 0x52, 0x55, 0x45, 0x0a, 0x41, 0x77,
    0x6f, 0x42, 0x41, 0x54, 0x41, 0x7a, 0x41, 0x68,
    0x51, 0x54, 0x69, 0x45, 0x73, 0x7a, 0x4a, 0x70,
    0x6b, 0x34, 0x77, 0x5a, 0x57, 0x71, 0x46, 0x77,
    0x2f, 0x4b, 0x64, 0x64, 0x6f, 0x58, 0x64, 0x54,
    0x6a, 0x66, 0x43, 0x78, 0x63, 0x4e, 0x4d, 0x6a,
    0x55, 0x77, 0x4e, 0x6a, 0x49, 0x31, 0x4d, 0x54,
    0x59, 0x7a, 0x4e, 0x6a, 0x49, 0x7a, 0x57, 0x6a,
    0x41, 0x4d, 0x4d, 0x41, 0x6f, 0x47, 0x0a, 0x41,
    0x31, 0x55, 0x64, 0x46, 0x51, 0x51, 0x44, 0x43,
    0x67, 0x45, 0x42, 0x4d, 0x44, 0x51, 0x43, 0x46,
    0x51, 0x43, 0x46, 0x30, 0x38, 0x6b, 0x34, 0x47,
    0x33, 0x65, 0x6e, 0x34, 0x45, 0x30, 0x52, 0x6e,
    0x4a, 0x35, 0x61, 0x31, 0x6e, 0x53, 0x66, 0x38,
    0x2f, 0x2b, 0x72, 0x68, 0x78, 0x63, 0x4e, 0x4d,
    0x6a, 0x55, 0x77, 0x4e, 0x6a, 0x49, 0x31, 0x4d,
    0x54, 0x59, 0x7a, 0x4e, 0x6a, 0x49, 0x7a, 0x0a,
    0x57, 0x6a, 0x41, 0x4d, 0x4d, 0x41, 0x6f, 0x47,
    0x41, 0x31, 0x55, 0x64, 0x46, 0x51, 0x51, 0x44,
    0x43, 0x67, 0x45, 0x42, 0x4d, 0x44, 0x51, 0x43,
    0x46, 0x51, 0x43, 0x54, 0x69, 0x48, 0x79, 0x6b,
    0x51, 0x52, 0x35, 0x36, 0x6b, 0x6a, 0x76, 0x52,
    0x2f, 0x74, 0x4b, 0x42, 0x6d, 0x79, 0x6c, 0x4a,
    0x38, 0x67, 0x47, 0x31, 0x74, 0x42, 0x63, 0x4e,
    0x4d, 0x6a, 0x55, 0x77, 0x4e, 0x6a, 0x49, 0x31,
    0x0a, 0x4d, 0x54, 0x59, 0x7a, 0x4e, 0x6a, 0x49,
    0x7a, 0x57, 0x6a, 0x41, 0x4d, 0x4d, 0x41, 0x6f,
    0x47, 0x41, 0x31, 0x55, 0x64, 0x46, 0x51, 0x51,
    0x44, 0x43, 0x67, 0x45, 0x42, 0x4d, 0x44, 0x4d,
    0x43, 0x46, 0x43, 0x53, 0x59, 0x33, 0x47, 0x4b,
    0x44, 0x6b, 0x77, 0x6d, 0x57, 0x2f, 0x59, 0x76,
    0x79, 0x4f, 0x6a, 0x65, 0x73, 0x76, 0x69, 0x61,
    0x6a, 0x76, 0x74, 0x52, 0x58, 0x46, 0x77, 0x30,
    0x79, 0x0a, 0x4e, 0x54, 0x41, 0x32, 0x4d, 0x6a,
    0x55, 0x78, 0x4e, 0x6a, 0x4d, 0x32, 0x4d, 0x6a,
    0x4e, 0x61, 0x4d, 0x41, 0x77, 0x77, 0x43, 0x67,
    0x59, 0x44, 0x56, 0x52, 0x30, 0x56, 0x42, 0x41,
    0x4d, 0x4b, 0x41, 0x51, 0x45, 0x77, 0x4e, 0x41,
    0x49, 0x56, 0x41, 0x49, 0x70, 0x6d, 0x38, 0x61,
    0x64, 0x4a, 0x53, 0x49, 0x5a, 0x6e, 0x61, 0x4a,
    0x7a, 0x44, 0x6b, 0x44, 0x72, 0x46, 0x54, 0x47,
    0x59, 0x72, 0x0a, 0x63, 0x53, 0x35, 0x7a, 0x46,
    0x77, 0x30, 0x79, 0x4e, 0x54, 0x41, 0x32, 0x4d,
    0x6a, 0x55, 0x78, 0x4e, 0x6a, 0x4d, 0x32, 0x4d,
    0x6a, 0x4e, 0x61, 0x4d, 0x41, 0x77, 0x77, 0x43,
    0x67, 0x59, 0x44, 0x56, 0x52, 0x30, 0x56, 0x42,
    0x41, 0x4d, 0x4b, 0x41, 0x51, 0x45, 0x77, 0x4e,
    0x41, 0x49, 0x56, 0x41, 0x4b, 0x2f, 0x42, 0x4e,
    0x68, 0x43, 0x39, 0x30, 0x32, 0x79, 0x33, 0x6d,
    0x46, 0x30, 0x51, 0x0a, 0x5a, 0x49, 0x47, 0x6f,
    0x67, 0x4e, 0x4f, 0x67, 0x48, 0x39, 0x6f, 0x48,
    0x46, 0x77, 0x30, 0x79, 0x4e, 0x54, 0x41, 0x32,
    0x4d, 0x6a, 0x55, 0x78, 0x4e, 0x6a, 0x4d, 0x32,
    0x4d, 0x6a, 0x4e, 0x61, 0x4d, 0x41, 0x77, 0x77,
    0x43, 0x67, 0x59, 0x44, 0x56, 0x52, 0x30, 0x56,
    0x42, 0x41, 0x4d, 0x4b, 0x41, 0x51, 0x45, 0x77,
    0x4e, 0x41, 0x49, 0x56, 0x41, 0x4f, 0x2f, 0x67,
    0x53, 0x79, 0x77, 0x7a, 0x0a, 0x30, 0x44, 0x61,
    0x71, 0x79, 0x57, 0x79, 0x6d, 0x63, 0x37, 0x38,
    0x65, 0x6d, 0x6b, 0x65, 0x32, 0x54, 0x56, 0x79,
    0x37, 0x46, 0x77, 0x30, 0x79, 0x4e, 0x54, 0x41,
    0x32, 0x4d, 0x6a, 0x55, 0x78, 0x4e, 0x6a, 0x4d,
    0x32, 0x4d, 0x6a, 0x4e, 0x61, 0x4d, 0x41, 0x77,
    0x77, 0x43, 0x67, 0x59, 0x44, 0x56, 0x52, 0x30,
    0x56, 0x42, 0x41, 0x4d, 0x4b, 0x41, 0x51, 0x45,
    0x77, 0x4e, 0x41, 0x49, 0x56, 0x0a, 0x41, 0x49,
    0x50, 0x5a, 0x72, 0x49, 0x32, 0x4c, 0x74, 0x51,
    0x6e, 0x52, 0x78, 0x73, 0x67, 0x4a, 0x72, 0x58,
    0x45, 0x75, 0x68, 0x44, 0x42, 0x56, 0x6e, 0x74,
    0x66, 0x7a, 0x46, 0x77, 0x30, 0x79, 0x4e, 0x54,
    0x41, 0x32, 0x4d, 0x6a, 0x55, 0x78, 0x4e, 0x6a,
    0x4d, 0x32, 0x4d, 0x6a, 0x4e, 0x61, 0x4d, 0x41,
    0x77, 0x77, 0x43, 0x67, 0x59, 0x44, 0x56, 0x52,
    0x30, 0x56, 0x42, 0x41, 0x4d, 0x4b, 0x0a, 0x41,
    0x51, 0x45, 0x77, 0x4d, 0x77, 0x49, 0x55, 0x65,
    0x54, 0x48, 0x39, 0x55, 0x4c, 0x55, 0x48, 0x48,
    0x42, 0x75, 0x2f, 0x78, 0x62, 0x65, 0x32, 0x33,
    0x74, 0x69, 0x30, 0x57, 0x35, 0x32, 0x4c, 0x68,
    0x53, 0x6b, 0x58, 0x44, 0x54, 0x49, 0x31, 0x4d,
    0x44, 0x59, 0x79, 0x4e, 0x54, 0x45, 0x32, 0x4d,
    0x7a, 0x59, 0x79, 0x4d, 0x31, 0x6f, 0x77, 0x44,
    0x44, 0x41, 0x4b, 0x42, 0x67, 0x4e, 0x56, 0x0a,
    0x48, 0x52, 0x55, 0x45, 0x41, 0x77, 0x6f, 0x42,
    0x41, 0x54, 0x41, 0x7a, 0x41, 0x68, 0x51, 0x66,
    0x6f, 0x67, 0x34, 0x70, 0x63, 0x4c, 0x33, 0x6c,
    0x31, 0x58, 0x39, 0x37, 0x6a, 0x64, 0x2b, 0x44,
    0x4f, 0x55, 0x68, 0x4f, 0x48, 0x78, 0x30, 0x49,
    0x49, 0x78, 0x63, 0x4e, 0x4d, 0x6a, 0x55, 0x77,
    0x4e, 0x6a, 0x49, 0x31, 0x4d, 0x54, 0x59, 0x7a,
    0x4e, 0x6a, 0x49, 0x7a, 0x57, 0x6a, 0x41, 0x4d,
    0x0a, 0x4d, 0x41, 0x6f, 0x47, 0x41, 0x31, 0x55,
    0x64, 0x46, 0x51, 0x51, 0x44, 0x43, 0x67, 0x45,
    0x42, 0x4d, 0x44, 0x4d, 0x43, 0x46, 0x42, 0x36,
    0x48, 0x73, 0x73, 0x4f, 0x7a, 0x4c, 0x59, 0x30,
    0x6a, 0x35, 0x42, 0x48, 0x4f, 0x38, 0x30, 0x47,
    0x58, 0x75, 0x56, 0x72, 0x77, 0x79, 0x4b, 0x33,
    0x31, 0x46, 0x77, 0x30, 0x79, 0x4e, 0x54, 0x41,
    0x32, 0x4d, 0x6a, 0x55, 0x78, 0x4e, 0x6a, 0x4d,
    0x32, 0x0a, 0x4d, 0x6a, 0x4e, 0x61, 0x4d, 0x41,
    0x77, 0x77, 0x43, 0x67, 0x59, 0x44, 0x56, 0x52,
    0x30, 0x56, 0x42, 0x41, 0x4d, 0x4b, 0x41, 0x51,
    0x45, 0x77, 0x4e, 0x41, 0x49, 0x56, 0x41, 0x4a,
    0x72, 0x39, 0x4c, 0x75, 0x6b, 0x4b, 0x52, 0x7a,
    0x56, 0x51, 0x6f, 0x57, 0x66, 0x5a, 0x6c, 0x70,
    0x45, 0x55, 0x4e, 0x38, 0x64, 0x51, 0x4c, 0x52,
    0x38, 0x4a, 0x46, 0x77, 0x30, 0x79, 0x4e, 0x54,
    0x41, 0x32, 0x0a, 0x4d, 0x6a, 0x55, 0x78, 0x4e,
    0x6a, 0x4d, 0x32, 0x4d, 0x6a, 0x4e, 0x61, 0x4d,
    0x41, 0x77, 0x77, 0x43, 0x67, 0x59, 0x44, 0x56,
    0x52, 0x30, 0x56, 0x42, 0x41, 0x4d, 0x4b, 0x41,
    0x51, 0x45, 0x77, 0x4d, 0x77, 0x49, 0x55, 0x52,
    0x49, 0x47, 0x77, 0x38, 0x52, 0x63, 0x6f, 0x6f,
    0x54, 0x74, 0x70, 0x62, 0x54, 0x36, 0x70, 0x78,
    0x33, 0x43, 0x67, 0x73, 0x56, 0x37, 0x46, 0x6a,
    0x64, 0x6f, 0x58, 0x0a, 0x44, 0x54, 0x49, 0x31,
    0x4d, 0x44, 0x59, 0x79, 0x4e, 0x54, 0x45, 0x32,
    0x4d, 0x7a, 0x59, 0x79, 0x4d, 0x31, 0x6f, 0x77,
    0x44, 0x44, 0x41, 0x4b, 0x42, 0x67, 0x4e, 0x56,
    0x48, 0x52, 0x55, 0x45, 0x41, 0x77, 0x6f, 0x42,
    0x41, 0x54, 0x41, 0x30, 0x41, 0x68, 0x55, 0x41,
    0x70, 0x34, 0x57, 0x66, 0x56, 0x35, 0x67, 0x75,
    0x38, 0x4f, 0x5a, 0x39, 0x4e, 0x37, 0x79, 0x4f,
    0x38, 0x75, 0x39, 0x61, 0x0a, 0x79, 0x44, 0x58,
    0x2f, 0x47, 0x71, 0x6b, 0x58, 0x44, 0x54, 0x49,
    0x31, 0x4d, 0x44, 0x59, 0x79, 0x4e, 0x54, 0x45,
    0x32, 0x4d, 0x7a, 0x59, 0x79, 0x4d, 0x31, 0x6f,
    0x77, 0x44, 0x44, 0x41, 0x4b, 0x42, 0x67, 0x4e,
    0x56, 0x48, 0x52, 0x55, 0x45, 0x41, 0x77, 0x6f,
    0x42, 0x41, 0x54, 0x41, 0x30, 0x41, 0x68, 0x55,
    0x41, 0x6e, 0x57, 0x64, 0x31, 0x4f, 0x34, 0x48,
    0x6b, 0x63, 0x4a, 0x43, 0x75, 0x0a, 0x70, 0x32,
    0x50, 0x37, 0x37, 0x45, 0x78, 0x46, 0x53, 0x62,
    0x7a, 0x62, 0x6d, 0x54, 0x4d, 0x58, 0x44, 0x54,
    0x49, 0x31, 0x4d, 0x44, 0x59, 0x79, 0x4e, 0x54,
    0x45, 0x32, 0x4d, 0x7a, 0x59, 0x79, 0x4d, 0x31,
    0x6f, 0x77, 0x44, 0x44, 0x41, 0x4b, 0x42, 0x67,
    0x4e, 0x56, 0x48, 0x52, 0x55, 0x45, 0x41, 0x77,
    0x6f, 0x42, 0x41, 0x54, 0x41, 0x7a, 0x41, 0x68,
    0x51, 0x30, 0x76, 0x37, 0x74, 0x36, 0x0a, 0x48,
    0x5a, 0x78, 0x57, 0x67, 0x55, 0x66, 0x68, 0x47,
    0x4c, 0x59, 0x55, 0x39, 0x37, 0x64, 0x75, 0x30,
    0x2b, 0x39, 0x6f, 0x33, 0x78, 0x63, 0x4e, 0x4d,
    0x6a, 0x55, 0x77, 0x4e, 0x6a, 0x49, 0x31, 0x4d,
    0x54, 0x59, 0x7a, 0x4e, 0x6a, 0x49, 0x7a, 0x57,
    0x6a, 0x41, 0x4d, 0x4d, 0x41, 0x6f, 0x47, 0x41,
    0x31, 0x55, 0x64, 0x46, 0x51, 0x51, 0x44, 0x43,
    0x67, 0x45, 0x42, 0x4d, 0x44, 0x4d, 0x43, 0x0a,
    0x46, 0x43, 0x77, 0x38, 0x78, 0x76, 0x36, 0x53,
    0x65, 0x64, 0x73, 0x56, 0x46, 0x74, 0x58, 0x4f,
    0x4f, 0x66, 0x4b, 0x6f, 0x6d, 0x4d, 0x32, 0x6c,
    0x6f, 0x58, 0x58, 0x68, 0x46, 0x77, 0x30, 0x79,
    0x4e, 0x54, 0x41, 0x32, 0x4d, 0x6a, 0x55, 0x78,
    0x4e, 0x6a, 0x4d, 0x32, 0x4d, 0x6a, 0x4e, 0x61,
    0x4d, 0x41, 0x77, 0x77, 0x43, 0x67, 0x59, 0x44,
    0x56, 0x52, 0x30, 0x56, 0x42, 0x41, 0x4d, 0x4b,
    0x0a, 0x41, 0x51, 0x45, 0x77, 0x4d, 0x77, 0x49,
    0x55, 0x63, 0x58, 0x6c, 0x49, 0x61, 0x48, 0x55,
    0x4a, 0x49, 0x30, 0x76, 0x70, 0x65, 0x65, 0x53,
    0x33, 0x33, 0x4f, 0x62, 0x7a, 0x47, 0x2b, 0x39,
    0x6b, 0x74, 0x6f, 0x77, 0x58, 0x44, 0x54, 0x49,
    0x31, 0x4d, 0x44, 0x59, 0x79, 0x4e, 0x54, 0x45,
    0x32, 0x4d, 0x7a, 0x59, 0x79, 0x4d, 0x31, 0x6f,
    0x77, 0x44, 0x44, 0x41, 0x4b, 0x42, 0x67, 0x4e,
    0x56, 0x0a, 0x48, 0x52, 0x55, 0x45, 0x41, 0x77,
    0x6f, 0x42, 0x41, 0x54, 0x41, 0x30, 0x41, 0x68,
    0x55, 0x41, 0x6e, 0x58, 0x62, 0x76, 0x4c, 0x44,
    0x6e, 0x42, 0x4e, 0x75, 0x68, 0x6c, 0x69, 0x32,
    0x35, 0x7a, 0x6c, 0x72, 0x48, 0x58, 0x52, 0x46,
    0x6f, 0x6e, 0x59, 0x78, 0x38, 0x58, 0x44, 0x54,
    0x49, 0x31, 0x4d, 0x44, 0x59, 0x79, 0x4e, 0x54,
    0x45, 0x32, 0x4d, 0x7a, 0x59, 0x79, 0x4d, 0x31,
    0x6f, 0x77, 0x0a, 0x44, 0x44, 0x41, 0x4b, 0x42,
    0x67, 0x4e, 0x56, 0x48, 0x52, 0x55, 0x45, 0x41,
    0x77, 0x6f, 0x42, 0x41, 0x54, 0x41, 0x30, 0x41,
    0x68, 0x55, 0x41, 0x77, 0x2b, 0x41, 0x6c, 0x2f,
    0x4b, 0x6d, 0x56, 0x38, 0x32, 0x39, 0x5a, 0x74,
    0x49, 0x52, 0x6e, 0x6b, 0x35, 0x34, 0x2b, 0x4e,
    0x4f, 0x59, 0x32, 0x47, 0x6d, 0x38, 0x58, 0x44,
    0x54, 0x49, 0x31, 0x4d, 0x44, 0x59, 0x79, 0x4e,
    0x54, 0x45, 0x32, 0x0a, 0x4d, 0x7a, 0x59, 0x79,
    0x4d, 0x31, 0x6f, 0x77, 0x44, 0x44, 0x41, 0x4b,
    0x42, 0x67, 0x4e, 0x56, 0x48, 0x52, 0x55, 0x45,
    0x41, 0x77, 0x6f, 0x42, 0x41, 0x54, 0x41, 0x30,
    0x41, 0x68, 0x55, 0x41, 0x6a, 0x46, 0x39, 0x72,
    0x4d, 0x6c, 0x66, 0x61, 0x42, 0x62, 0x46, 0x30,
    0x4b, 0x65, 0x4c, 0x6d, 0x47, 0x36, 0x6c, 0x6c,
    0x31, 0x6e, 0x4d, 0x77, 0x59, 0x47, 0x6f, 0x58,
    0x44, 0x54, 0x49, 0x31, 0x0a, 0x4d, 0x44, 0x59,
    0x79, 0x4e, 0x54, 0x45, 0x32, 0x4d, 0x7a, 0x59,
    0x79, 0x4d, 0x31, 0x6f, 0x77, 0x44, 0x44, 0x41,
    0x4b, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x52, 0x55,
    0x45, 0x41, 0x77, 0x6f, 0x42, 0x41, 0x54, 0x41,
    0x30, 0x41, 0x68, 0x55, 0x41, 0x6f, 0x58, 0x78,
    0x52, 0x63, 0x69, 0x37, 0x42, 0x34, 0x4d, 0x4d,
    0x6e, 0x6a, 0x2b, 0x69, 0x39, 0x38, 0x46, 0x49,
    0x46, 0x6e, 0x4c, 0x37, 0x45, 0x0a, 0x35, 0x6b,
    0x67, 0x58, 0x44, 0x54, 0x49, 0x31, 0x4d, 0x44,
    0x59, 0x79, 0x4e, 0x54, 0x45, 0x32, 0x4d, 0x7a,
    0x59, 0x79, 0x4d, 0x31, 0x6f, 0x77, 0x44, 0x44,
    0x41, 0x4b, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x52,
    0x55, 0x45, 0x41, 0x77, 0x6f, 0x42, 0x41, 0x61,
    0x41, 0x76, 0x4d, 0x43, 0x30, 0x77, 0x43, 0x67,
    0x59, 0x44, 0x56, 0x52, 0x30, 0x55, 0x42, 0x41,
    0x4d, 0x43, 0x41, 0x51, 0x45, 0x77, 0x0a, 0x48,
    0x77, 0x59, 0x44, 0x56, 0x52, 0x30, 0x6a, 0x42,
    0x42, 0x67, 0x77, 0x46, 0x6f, 0x41, 0x55, 0x6c,
    0x57, 0x39, 0x64, 0x7a, 0x62, 0x30, 0x62, 0x34,
    0x65, 0x6c, 0x41, 0x53, 0x63, 0x6e, 0x55, 0x39,
    0x44, 0x50, 0x4f, 0x41, 0x56, 0x63, 0x4c, 0x33,
    0x6c, 0x51, 0x77, 0x43, 0x67, 0x59, 0x49, 0x4b,
    0x6f, 0x5a, 0x49, 0x7a, 0x6a, 0x30, 0x45, 0x41,
    0x77, 0x49, 0x44, 0x53, 0x41, 0x41, 0x77, 0x0a,
    0x52, 0x51, 0x49, 0x68, 0x41, 0x4c, 0x69, 0x53,
    0x75, 0x46, 0x4b, 0x6b, 0x42, 0x51, 0x37, 0x69,
    0x73, 0x74, 0x46, 0x59, 0x6b, 0x4b, 0x2b, 0x78,
    0x69, 0x54, 0x4f, 0x52, 0x79, 0x61, 0x51, 0x48,
    0x4b, 0x61, 0x46, 0x4e, 0x4f, 0x52, 0x71, 0x77,
    0x55, 0x48, 0x54, 0x76, 0x37, 0x78, 0x35, 0x41,
    0x41, 0x69, 0x41, 0x61, 0x75, 0x66, 0x57, 0x43,
    0x62, 0x39, 0x35, 0x43, 0x4f, 0x42, 0x5a, 0x4f,
    0x0a, 0x59, 0x74, 0x78, 0x4e, 0x36, 0x46, 0x67,
    0x6e, 0x56, 0x6e, 0x39, 0x46, 0x63, 0x4f, 0x49,
    0x4d, 0x68, 0x46, 0x47, 0x69, 0x30, 0x2f, 0x38,
    0x55, 0x62, 0x6a, 0x49, 0x59, 0x46, 0x77, 0x3d,
    0x3d, 0x0a, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45,
    0x4e, 0x44, 0x20, 0x58, 0x35, 0x30, 0x39, 0x20,
    0x43, 0x52, 0x4c, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
    0x0a, 0x00, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42,
    0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52,
    0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45,
    0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x0a, 0x4d, 0x49,
    0x49, 0x43, 0x6a, 0x54, 0x43, 0x43, 0x41, 0x6a,
    0x4b, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67,
    0x49, 0x55, 0x66, 0x6a, 0x69, 0x43, 0x31, 0x66,
    0x74, 0x56, 0x4b, 0x55, 0x70, 0x41, 0x53, 0x59,
    0x35, 0x46, 0x68, 0x41, 0x50, 0x70, 0x46, 0x4a,
    0x47, 0x39, 0x39, 0x46, 0x55, 0x77, 0x43, 0x67,
    0x59, 0x49, 0x4b, 0x6f, 0x5a, 0x49, 0x7a, 0x6a,
    0x30, 0x45, 0x41, 0x77, 0x49, 0x77, 0x0a, 0x61,
    0x44, 0x45, 0x61, 0x4d, 0x42, 0x67, 0x47, 0x41,
    0x31, 0x55, 0x45, 0x41, 0x77, 0x77, 0x52, 0x53,
    0x57, 0x35, 0x30, 0x5a, 0x57, 0x77, 0x67, 0x55,
    0x30, 0x64, 0x59, 0x49, 0x46, 0x4a, 0x76, 0x62,
    0x33, 0x51, 0x67, 0x51, 0x30, 0x45, 0x78, 0x47,
    0x6a, 0x41, 0x59, 0x42, 0x67, 0x4e, 0x56, 0x42,
    0x41, 0x6f, 0x4d, 0x45, 0x55, 0x6c, 0x75, 0x64,
    0x47, 0x56, 0x73, 0x49, 0x45, 0x4e, 0x76, 0x0a,
    0x63, 0x6e, 0x42, 0x76, 0x63, 0x6d, 0x46, 0x30,
    0x61, 0x57, 0x39, 0x75, 0x4d, 0x52, 0x51, 0x77,
    0x45, 0x67, 0x59, 0x44, 0x56, 0x51, 0x51, 0x48,
    0x44, 0x41, 0x74, 0x54, 0x59, 0x57, 0x35, 0x30,
    0x59, 0x53, 0x42, 0x44, 0x62, 0x47, 0x46, 0x79,
    0x59, 0x54, 0x45, 0x4c, 0x4d, 0x41, 0x6b, 0x47,
    0x41, 0x31, 0x55, 0x45, 0x43, 0x41, 0x77, 0x43,
    0x51, 0x30, 0x45, 0x78, 0x43, 0x7a, 0x41, 0x4a,
    0x0a, 0x42, 0x67, 0x4e, 0x56, 0x42, 0x41, 0x59,
    0x54, 0x41, 0x6c, 0x56, 0x54, 0x4d, 0x42, 0x34,
    0x58, 0x44, 0x54, 0x49, 0x31, 0x4d, 0x44, 0x55,
    0x77, 0x4e, 0x6a, 0x41, 0x35, 0x4d, 0x6a, 0x55,
    0x77, 0x4d, 0x46, 0x6f, 0x58, 0x44, 0x54, 0x4d,
    0x79, 0x4d, 0x44, 0x55, 0x77, 0x4e, 0x6a, 0x41,
    0x35, 0x4d, 0x6a, 0x55, 0x77, 0x4d, 0x46, 0x6f,
    0x77, 0x62, 0x44, 0x45, 0x65, 0x4d, 0x42, 0x77,
    0x47, 0x0a, 0x41, 0x31, 0x55, 0x45, 0x41, 0x77,
    0x77, 0x56, 0x53, 0x57, 0x35, 0x30, 0x5a, 0x57,
    0x77, 0x67, 0x55, 0x30, 0x64, 0x59, 0x49, 0x46,
    0x52, 0x44, 0x51, 0x69, 0x42, 0x54, 0x61, 0x57,
    0x64, 0x75, 0x61, 0x57, 0x35, 0x6e, 0x4d, 0x52,
    0x6f, 0x77, 0x47, 0x41, 0x59, 0x44, 0x56, 0x51,
    0x51, 0x4b, 0x44, 0x42, 0x46, 0x4a, 0x62, 0x6e,
    0x52, 0x6c, 0x62, 0x43, 0x42, 0x44, 0x62, 0x33,
    0x4a, 0x77, 0x0a, 0x62, 0x33, 0x4a, 0x68, 0x64,
    0x47, 0x6c, 0x76, 0x62, 0x6a, 0x45, 0x55, 0x4d,
    0x42, 0x49, 0x47, 0x41, 0x31, 0x55, 0x45, 0x42,
    0x77, 0x77, 0x4c, 0x55, 0x32, 0x46, 0x75, 0x64,
    0x47, 0x45, 0x67, 0x51, 0x32, 0x78, 0x68, 0x63,
    0x6d, 0x45, 0x78, 0x43, 0x7a, 0x41, 0x4a, 0x42,
    0x67, 0x4e, 0x56, 0x42, 0x41, 0x67, 0x4d, 0x41,
    0x6b, 0x4e, 0x42, 0x4d, 0x51, 0x73, 0x77, 0x43,
    0x51, 0x59, 0x44, 0x0a, 0x56, 0x51, 0x51, 0x47,
    0x45, 0x77, 0x4a, 0x56, 0x55, 0x7a, 0x42, 0x5a,
    0x4d, 0x42, 0x4d, 0x47, 0x42, 0x79, 0x71, 0x47,
    0x53, 0x4d, 0x34, 0x39, 0x41, 0x67, 0x45, 0x47,
    0x43, 0x43, 0x71, 0x47, 0x53, 0x4d, 0x34, 0x39,
    0x41, 0x77, 0x45, 0x48, 0x41, 0x30, 0x49, 0x41,
    0x42, 0x45, 0x4e, 0x46, 0x47, 0x38, 0x78, 0x7a,
    0x79, 0x64, 0x57, 0x52, 0x66, 0x4b, 0x39, 0x32,
    0x62, 0x6d, 0x47, 0x76, 0x0a, 0x50, 0x2b, 0x6d,
    0x41, 0x68, 0x39, 0x31, 0x50, 0x45, 0x79, 0x56,
    0x37, 0x4a, 0x68, 0x36, 0x46, 0x47, 0x4a, 0x64,
    0x35, 0x6e, 0x64, 0x45, 0x39, 0x61, 0x42, 0x48,
    0x37, 0x52, 0x33, 0x45, 0x34, 0x41, 0x37, 0x75,
    0x62, 0x72, 0x6c, 0x68, 0x2f, 0x7a, 0x4e, 0x33,
    0x43, 0x34, 0x78, 0x76, 0x70, 0x6f, 0x6f, 0x75,
    0x47, 0x6c, 0x69, 0x72, 0x4d, 0x62, 0x61, 0x2b,
    0x57, 0x32, 0x6c, 0x6a, 0x75, 0x0a, 0x79, 0x70,
    0x61, 0x6a, 0x67, 0x62, 0x55, 0x77, 0x67, 0x62,
    0x49, 0x77, 0x48, 0x77, 0x59, 0x44, 0x56, 0x52,
    0x30, 0x6a, 0x42, 0x42, 0x67, 0x77, 0x46, 0x6f,
    0x41, 0x55, 0x49, 0x6d, 0x55, 0x4d, 0x31, 0x6c,
    0x71, 0x64, 0x4e, 0x49, 0x6e, 0x7a, 0x67, 0x37,
    0x53, 0x56, 0x55, 0x72, 0x39, 0x51, 0x47, 0x7a,
    0x6b, 0x6e, 0x42, 0x71, 0x77, 0x77, 0x55, 0x67,
    0x59, 0x44, 0x56, 0x52, 0x30, 0x66, 0x0a, 0x42,
    0x45, 0x73, 0x77, 0x53, 0x54, 0x42, 0x48, 0x6f,
    0x45, 0x57, 0x67, 0x51, 0x34, 0x5a, 0x42, 0x61,
    0x48, 0x52, 0x30, 0x63, 0x48, 0x4d, 0x36, 0x4c,
    0x79, 0x39, 0x6a, 0x5a, 0x58, 0x4a, 0x30, 0x61,
    0x57, 0x5a, 0x70, 0x59, 0x32, 0x46, 0x30, 0x5a,
    0x58, 0x4d, 0x75, 0x64, 0x48, 0x4a, 0x31, 0x63,
    0x33, 0x52, 0x6c, 0x5a, 0x48, 0x4e, 0x6c, 0x63,
    0x6e, 0x5a, 0x70, 0x59, 0x32, 0x56, 0x7a, 0x0a,
    0x4c, 0x6d, 0x6c, 0x75, 0x64, 0x47, 0x56, 0x73,
    0x4c, 0x6d, 0x4e, 0x76, 0x62, 0x53, 0x39, 0x4a,
    0x62, 0x6e, 0x52, 0x6c, 0x62, 0x46, 0x4e, 0x48,
    0x57, 0x46, 0x4a, 0x76, 0x62, 0x33, 0x52, 0x44,
    0x51, 0x53, 0x35, 0x6b, 0x5a, 0x58, 0x49, 0x77,
    0x48, 0x51, 0x59, 0x44, 0x56, 0x52, 0x30, 0x4f,
    0x42, 0x42, 0x59, 0x45, 0x46, 0x48, 0x34, 0x34,
    0x67, 0x74, 0x58, 0x37, 0x56, 0x53, 0x6c, 0x4b,
    0x0a, 0x51, 0x45, 0x6d, 0x4f, 0x52, 0x59, 0x51,
    0x44, 0x36, 0x52, 0x53, 0x52, 0x76, 0x66, 0x52,
    0x56, 0x4d, 0x41, 0x34, 0x47, 0x41, 0x31, 0x55,
    0x64, 0x44, 0x77, 0x45, 0x42, 0x2f, 0x77, 0x51,
    0x45, 0x41, 0x77, 0x49, 0x47, 0x77, 0x44, 0x41,
    0x4d, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x52, 0x4d,
    0x42, 0x41, 0x66, 0x38, 0x45, 0x41, 0x6a, 0x41,
    0x41, 0x4d, 0x41, 0x6f, 0x47, 0x43, 0x43, 0x71,
    0x47, 0x0a, 0x53, 0x4d, 0x34, 0x39, 0x42, 0x41,
    0x4d, 0x43, 0x41, 0x30, 0x6b, 0x41, 0x4d, 0x45,
    0x59, 0x43, 0x49, 0x51, 0x44, 0x64, 0x6d, 0x6d,
    0x52, 0x75, 0x41, 0x6f, 0x33, 0x71, 0x43, 0x4f,
    0x38, 0x54, 0x43, 0x31, 0x49, 0x6f, 0x4a, 0x4d,
    0x49, 0x54, 0x41, 0x6f, 0x4f, 0x45, 0x77, 0x34,
    0x64, 0x6c, 0x67, 0x45, 0x42, 0x48, 0x7a, 0x53,
    0x7a, 0x31, 0x54, 0x75, 0x4d, 0x53, 0x54, 0x41,
    0x49, 0x68, 0x0a, 0x41, 0x4b, 0x56, 0x54, 0x71,
    0x4f, 0x6b, 0x74, 0x35, 0x39, 0x2b, 0x63, 0x6f,
    0x30, 0x4f, 0x33, 0x6d, 0x33, 0x68, 0x43, 0x2b,
    0x76, 0x35, 0x46, 0x62, 0x30, 0x30, 0x46, 0x6a,
    0x59, 0x57, 0x63, 0x67, 0x65, 0x75, 0x33, 0x45,
    0x69, 0x6a, 0x4f, 0x55, 0x4c, 0x6f, 0x35, 0x0a,
    0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44,
    0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49,
    0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d,
    0x2d, 0x0a, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42,
    0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52,
    0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45,
    0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x0a, 0x4d, 0x49,
    0x49, 0x43, 0x6a, 0x7a, 0x43, 0x43, 0x41, 0x6a,
    0x53, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67,
    0x49, 0x55, 0x49, 0x6d, 0x55, 0x4d, 0x31, 0x6c,
    0x71, 0x64, 0x4e, 0x49, 0x6e, 0x7a, 0x67, 0x37,
    0x53, 0x56, 0x55, 0x72, 0x39, 0x51, 0x47, 0x7a,
    0x6b, 0x6e, 0x42, 0x71, 0x77, 0x77, 0x43, 0x67,
    0x59, 0x49, 0x4b, 0x6f, 0x5a, 0x49, 0x7a, 0x6a,
    0x30, 0x45, 0x41, 0x77, 0x49, 0x77, 0x0a, 0x61,
    0x44, 0x45, 0x61, 0x4d, 0x42, 0x67, 0x47, 0x41,
    0x31, 0x55, 0x45, 0x41, 0x77, 0x77, 0x52, 0x53,
    0x57, 0x35, 0x30, 0x5a, 0x57, 0x77, 0x67, 0x55,
    0x30, 0x64, 0x59, 0x49, 0x46, 0x4a, 0x76, 0x62,
    0x33, 0x51, 0x67, 0x51, 0x30, 0x45, 0x78, 0x47,
    0x6a, 0x41, 0x59, 0x42, 0x67, 0x4e, 0x56, 0x42,
    0x41, 0x6f, 0x4d, 0x45, 0x55, 0x6c, 0x75, 0x64,
    0x47, 0x56, 0x73, 0x49, 0x45, 0x4e, 0x76, 0x0a,
    0x63, 0x6e, 0x42, 0x76, 0x63, 0x6d, 0x46, 0x30,
    0x61, 0x57, 0x39, 0x75, 0x4d, 0x52, 0x51, 0x77,
    0x45, 0x67, 0x59, 0x44, 0x56, 0x51, 0x51, 0x48,
    0x44, 0x41, 0x74, 0x54, 0x59, 0x57, 0x35, 0x30,
    0x59, 0x53, 0x42, 0x44, 0x62, 0x47, 0x46, 0x79,
    0x59, 0x54, 0x45, 0x4c, 0x4d, 0x41, 0x6b, 0x47,
    0x41, 0x31, 0x55, 0x45, 0x43, 0x41, 0x77, 0x43,
    0x51, 0x30, 0x45, 0x78, 0x43, 0x7a, 0x41, 0x4a,
    0x0a, 0x42, 0x67, 0x4e, 0x56, 0x42, 0x41, 0x59,
    0x54, 0x41, 0x6c, 0x56, 0x54, 0x4d, 0x42, 0x34,
    0x58, 0x44, 0x54, 0x45, 0x34, 0x4d, 0x44, 0x55,
    0x79, 0x4d, 0x54, 0x45, 0x77, 0x4e, 0x44, 0x55,
    0x78, 0x4d, 0x46, 0x6f, 0x58, 0x44, 0x54, 0x51,
    0x35, 0x4d, 0x54, 0x49, 0x7a, 0x4d, 0x54, 0x49,
    0x7a, 0x4e, 0x54, 0x6b, 0x31, 0x4f, 0x56, 0x6f,
    0x77, 0x61, 0x44, 0x45, 0x61, 0x4d, 0x42, 0x67,
    0x47, 0x0a, 0x41, 0x31, 0x55, 0x45, 0x41, 0x77,
    0x77, 0x52, 0x53, 0x57, 0x35, 0x30, 0x5a, 0x57,
    0x77, 0x67, 0x55, 0x30, 0x64, 0x59, 0x49, 0x46,
    0x4a, 0x76, 0x62, 0x33, 0x51, 0x67, 0x51, 0x30,
    0x45, 0x78, 0x47, 0x6a, 0x41, 0x59, 0x42, 0x67,
    0x4e, 0x56, 0x42, 0x41, 0x6f, 0x4d, 0x45, 0x55,
    0x6c, 0x75, 0x64, 0x47, 0x56, 0x73, 0x49, 0x45,
    0x4e, 0x76, 0x63, 0x6e, 0x42, 0x76, 0x63, 0x6d,
    0x46, 0x30, 0x0a, 0x61, 0x57, 0x39, 0x75, 0x4d,
    0x52, 0x51, 0x77, 0x45, 0x67, 0x59, 0x44, 0x56,
    0x51, 0x51, 0x48, 0x44, 0x41, 0x74, 0x54, 0x59,
    0x57, 0x35, 0x30, 0x59, 0x53, 0x42, 0x44, 0x62,
    0x47, 0x46, 0x79, 0x59, 0x54, 0x45, 0x4c, 0x4d,
    0x41, 0x6b, 0x47, 0x41, 0x31, 0x55, 0x45, 0x43,
    0x41, 0x77, 0x43, 0x51, 0x30, 0x45, 0x78, 0x43,
    0x7a, 0x41, 0x4a, 0x42, 0x67, 0x4e, 0x56, 0x42,
    0x41, 0x59, 0x54, 0x0a, 0x41, 0x6c, 0x56, 0x54,
    0x4d, 0x46, 0x6b, 0x77, 0x45, 0x77, 0x59, 0x48,
    0x4b, 0x6f, 0x5a, 0x49, 0x7a, 0x6a, 0x30, 0x43,
    0x41, 0x51, 0x59, 0x49, 0x4b, 0x6f, 0x5a, 0x49,
    0x7a, 0x6a, 0x30, 0x44, 0x41, 0x51, 0x63, 0x44,
    0x51, 0x67, 0x41, 0x45, 0x43, 0x36, 0x6e, 0x45,
    0x77, 0x4d, 0x44, 0x49, 0x59, 0x5a, 0x4f, 0x6a,
    0x2f, 0x69, 0x50, 0x57, 0x73, 0x43, 0x7a, 0x61,
    0x45, 0x4b, 0x69, 0x37, 0x0a, 0x31, 0x4f, 0x69,
    0x4f, 0x53, 0x4c, 0x52, 0x46, 0x68, 0x57, 0x47,
    0x6a, 0x62, 0x6e, 0x42, 0x56, 0x4a, 0x66, 0x56,
    0x6e, 0x6b, 0x59, 0x34, 0x75, 0x33, 0x49, 0x6a,
    0x6b, 0x44, 0x59, 0x59, 0x4c, 0x30, 0x4d, 0x78,
    0x4f, 0x34, 0x6d, 0x71, 0x73, 0x79, 0x59, 0x6a,
    0x6c, 0x42, 0x61, 0x6c, 0x54, 0x56, 0x59, 0x78,
    0x46, 0x50, 0x32, 0x73, 0x4a, 0x42, 0x4b, 0x35,
    0x7a, 0x6c, 0x4b, 0x4f, 0x42, 0x0a, 0x75, 0x7a,
    0x43, 0x42, 0x75, 0x44, 0x41, 0x66, 0x42, 0x67,
    0x4e, 0x56, 0x48, 0x53, 0x4d, 0x45, 0x47, 0x44,
    0x41, 0x57, 0x67, 0x42, 0x51, 0x69, 0x5a, 0x51,
    0x7a, 0x57, 0x57, 0x70, 0x30, 0x30, 0x69, 0x66,
    0x4f, 0x44, 0x74, 0x4a, 0x56, 0x53, 0x76, 0x31,
    0x41, 0x62, 0x4f, 0x53, 0x63, 0x47, 0x72, 0x44,
    0x42, 0x53, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x52,
    0x38, 0x45, 0x53, 0x7a, 0x42, 0x4a, 0x0a, 0x4d,
    0x45, 0x65, 0x67, 0x52, 0x61, 0x42, 0x44, 0x68,
    0x6b, 0x46, 0x6f, 0x64, 0x48, 0x52, 0x77, 0x63,
    0x7a, 0x6f, 0x76, 0x4c, 0x32, 0x4e, 0x6c, 0x63,
    0x6e, 0x52, 0x70, 0x5a, 0x6d, 0x6c, 0x6a, 0x59,
    0x58, 0x52, 0x6c, 0x63, 0x79, 0x35, 0x30, 0x63,
    0x6e, 0x56, 0x7a, 0x64, 0x47, 0x56, 0x6b, 0x63,
    0x32, 0x56, 0x79, 0x64, 0x6d, 0x6c, 0x6a, 0x5a,
    0x58, 0x4d, 0x75, 0x61, 0x57, 0x35, 0x30, 0x0a,
    0x5a, 0x57, 0x77, 0x75, 0x59, 0x32, 0x39, 0x74,
    0x4c, 0x30, 0x6c, 0x75, 0x64, 0x47, 0x56, 0x73,
    0x55, 0x30, 0x64, 0x59, 0x55, 0x6d, 0x39, 0x76,
    0x64, 0x45, 0x4e, 0x42, 0x4c, 0x6d, 0x52, 0x6c,
    0x63, 0x6a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56,
    0x48, 0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55,
    0x49, 0x6d, 0x55, 0x4d, 0x31, 0x6c, 0x71, 0x64,
    0x4e, 0x49, 0x6e, 0x7a, 0x67, 0x37, 0x53, 0x56,
    0x0a, 0x55, 0x72, 0x39, 0x51, 0x47, 0x7a, 0x6b,
    0x6e, 0x42, 0x71, 0x77, 0x77, 0x44, 0x67, 0x59,
    0x44, 0x56, 0x52, 0x30, 0x50, 0x41, 0x51, 0x48,
    0x2f, 0x42, 0x41, 0x51, 0x44, 0x41, 0x67, 0x45,
    0x47, 0x4d, 0x42, 0x49, 0x47, 0x41, 0x31, 0x55,
    0x64, 0x45, 0x77, 0x45, 0x42, 0x2f, 0x77, 0x51,
    0x49, 0x4d, 0x41, 0x59, 0x42, 0x41, 0x66, 0x38,
    0x43, 0x41, 0x51, 0x45, 0x77, 0x43, 0x67, 0x59,
    0x49, 0x0a, 0x4b, 0x6f, 0x5a, 0x49, 0x7a, 0x6a,
    0x30, 0x45, 0x41, 0x77, 0x49, 0x44, 0x53, 0x51,
    0x41, 0x77, 0x52, 0x67, 0x49, 0x68, 0x41, 0x4f,
    0x57, 0x2f, 0x35, 0x51, 0x6b, 0x52, 0x2b, 0x53,
    0x39, 0x43, 0x69, 0x53, 0x44, 0x63, 0x4e, 0x6f,
    0x6f, 0x77, 0x4c, 0x75, 0x50, 0x52, 0x4c, 0x73,
    0x57, 0x47, 0x66, 0x2f, 0x59, 0x69, 0x37, 0x47,
    0x53, 0x58, 0x39, 0x34, 0x42, 0x67, 0x77, 0x54,
    0x77, 0x67, 0x0a, 0x41, 0x69, 0x45, 0x41, 0x34,
    0x4a, 0x30, 0x6c, 0x72, 0x48, 0x6f, 0x4d, 0x73,
    0x2b, 0x58, 0x6f, 0x35, 0x6f, 0x2f, 0x73, 0x58,
    0x36, 0x4f, 0x39, 0x51, 0x57, 0x78, 0x48, 0x52,
    0x41, 0x76, 0x5a, 0x55, 0x47, 0x4f, 0x64, 0x52,
    0x51, 0x37, 0x63, 0x76, 0x71, 0x52, 0x58, 0x61,
    0x71, 0x49, 0x3d, 0x0a, 0x2d, 0x2d, 0x2d, 0x2d,
    0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52,
    0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45,
    0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x0a, 0x00, 0x7b,
    0x22, 0x74, 0x63, 0x62, 0x49, 0x6e, 0x66, 0x6f,
    0x22, 0x3a, 0x7b, 0x22, 0x69, 0x64, 0x22, 0x3a,
    0x22, 0x54, 0x44, 0x58, 0x22, 0x2c, 0x22, 0x76,
    0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3a,
    0x33, 0x2c, 0x22, 0x69, 0x73, 0x73, 0x75, 0x65,
    0x44, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x22, 0x32,
    0x30, 0x32, 0x35, 0x2d, 0x30, 0x36, 0x2d, 0x32,
    0x35, 0x54, 0x31, 0x36, 0x3a, 0x30, 0x34, 0x3a,
    0x35, 0x35, 0x5a, 0x22, 0x2c, 0x22, 0x6e, 0x65,
    0x78, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
    0x22, 0x3a, 0x22, 0x32, 0x30, 0x32, 0x35, 0x2d,
    0x30, 0x37, 0x2d, 0x32, 0x35, 0x54, 0x31, 0x36,
    0x3a, 0x30, 0x34, 0x3a, 0x35, 0x35, 0x5a, 0x22,
    0x2c, 0x22, 0x66, 0x6d, 0x73, 0x70, 0x63, 0x22,
    0x3a, 0x22, 0x39, 0x30, 0x43, 0x30, 0x36, 0x46,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x22, 0x2c,
    0x22, 0x70, 0x63, 0x65, 0x49, 0x64, 0x22, 0x3a,
    0x22, 0x30, 0x30, 0x30, 0x30, 0x22, 0x2c, 0x22,
    0x74, 0x63, 0x62, 0x54, 0x79, 0x70, 0x65, 0x22,
    0x3a, 0x30, 0x2c, 0x22, 0x74, 0x63, 0x62, 0x45,
    0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
    0x6e, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x75, 0x6d,
    0x62, 0x65, 0x72, 0x22, 0x3a, 0x31, 0x37, 0x2c,
    0x22, 0x74, 0x64, 0x78, 0x4d, 0x6f, 0x64, 0x75,
    0x6c, 0x65, 0x22, 0x3a, 0x7b, 0x22, 0x6d, 0x72,
    0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x22, 0x3a,
    0x22, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x22, 0x2c, 0x22, 0x61, 0x74, 0x74, 0x72,
    0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x3a,
    0x22, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x22, 0x2c, 0x22, 0x61, 0x74, 0x74, 0x72,
    0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x4d, 0x61,
    0x73, 0x6b, 0x22, 0x3a, 0x22, 0x46, 0x46, 0x46,
    0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46,
    0x46, 0x46, 0x46, 0x46, 0x46, 0x22, 0x7d, 0x2c,
    0x22, 0x74, 0x64, 0x78, 0x4d, 0x6f, 0x64, 0x75,
    0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
    0x74, 0x69, 0x65, 0x73, 0x22, 0x3a, 0x5b, 0x7b,
    0x22, 0x69, 0x64, 0x22, 0x3a, 0x22, 0x54, 0x44,
    0x58, 0x5f, 0x30, 0x33, 0x22, 0x2c, 0x22, 0x6d,
    0x72, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x22,
    0x3a, 0x22, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x22, 0x2c, 0x22, 0x61, 0x74, 0x74,
    0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22,
    0x3a, 0x22, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x22, 0x2c, 0x22, 0x61, 0x74, 0x74,
    0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x4d,
    0x61, 0x73, 0x6b, 0x22, 0x3a, 0x22, 0x46, 0x46,
    0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46,
    0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x22, 0x2c,
    0x22, 0x74, 0x63, 0x62, 0x4c, 0x65, 0x76, 0x65,
    0x6c, 0x73, 0x22, 0x3a, 0x5b, 0x7b, 0x22, 0x74,
    0x63, 0x62, 0x22, 0x3a, 0x7b, 0x22, 0x69, 0x73,
    0x76, 0x73, 0x76, 0x6e, 0x22, 0x3a, 0x33, 0x7d,
    0x2c, 0x22, 0x74, 0x63, 0x62, 0x44, 0x61, 0x74,
    0x65, 0x22, 0x3a, 0x22, 0x32, 0x30, 0x32, 0x34,
    0x2d, 0x30, 0x33, 0x2d, 0x31, 0x33, 0x54, 0x30,
    0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x5a,
    0x22, 0x2c, 0x22, 0x74, 0x63, 0x62, 0x53, 0x74,
    0x61, 0x74, 0x75, 0x73, 0x22, 0x3a, 0x22, 0x55,
    0x70, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x22,
    0x7d, 0x5d, 0x7d, 0x2c, 0x7b, 0x22, 0x69, 0x64,
    0x22, 0x3a, 0x22, 0x54, 0x44, 0x58, 0x5f, 0x30,
    0x31, 0x22, 0x2c, 0x22, 0x6d, 0x72, 0x73, 0x69,
    0x67, 0x6e, 0x65, 0x72, 0x22, 0x3a, 0x22, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x22,
    0x2c, 0x22, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
    0x75, 0x74, 0x65, 0x73, 0x22, 0x3a, 0x22, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x22,
    0x2c, 0x22, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
    0x75, 0x74, 0x65, 0x73, 0x4d, 0x61, 0x73, 0x6b,
    0x22, 0x3a, 0x22, 0x46, 0x46, 0x46, 0x46, 0x46,
    0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46,
    0x46, 0x46, 0x46, 0x22, 0x2c, 0x22, 0x74, 0x63,
    0x62, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x22,
    0x3a, 0x5b, 0x7b, 0x22, 0x74, 0x63, 0x62, 0x22,
    0x3a, 0x7b, 0x22, 0x69, 0x73, 0x76, 0x73, 0x76,
    0x6e, 0x22, 0x3a, 0x34, 0x7d, 0x2c, 0x22, 0x74,
    0x63, 0x62, 0x44, 0x61, 0x74, 0x65, 0x22, 0x3a,
    0x22, 0x32, 0x30, 0x32, 0x34, 0x2d, 0x30, 0x33,
    0x2d, 0x31, 0x33, 0x54, 0x30, 0x30, 0x3a, 0x30,
    0x30, 0x3a, 0x30, 0x30, 0x5a, 0x22, 0x2c, 0x22,
    0x74, 0x63, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75,
    0x73, 0x22, 0x3a, 0x22, 0x55, 0x70, 0x54, 0x6f,
    0x44, 0x61, 0x74, 0x65, 0x22, 0x7d, 0x2c, 0x7b,
    0x22, 0x74, 0x63, 0x62, 0x22, 0x3a, 0x7b, 0x22,
    0x69, 0x73, 0x76, 0x73, 0x76, 0x6e, 0x22, 0x3a,
    0x32, 0x7d, 0x2c, 0x22, 0x74, 0x63, 0x62, 0x44,
    0x61, 0x74, 0x65, 0x22, 0x3a, 0x22, 0x32, 0x30,
    0x32, 0x33, 0x2d, 0x30, 0x38, 0x2d, 0x30, 0x39,
    0x54, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30,
    0x30, 0x5a, 0x22, 0x2c, 0x22, 0x74, 0x63, 0x62,
    0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3a,
    0x22, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x44, 0x61,
    0x74, 0x65, 0x22, 0x7d, 0x5d, 0x7d, 0x5d, 0x2c,
    0x22, 0x74, 0x63, 0x62, 0x4c, 0x65, 0x76, 0x65,
    0x6c, 0x73, 0x22, 0x3a, 0x5b, 0x7b, 0x22, 0x74,
    0x63, 0x62, 0x22, 0x3a, 0x7b, 0x22, 0x73, 0x67,
    0x78, 0x74, 0x63, 0x62, 0x63, 0x6f, 0x6d, 0x70,
    0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x3a,
    0x5b, 0x7b, 0x22, 0x73, 0x76, 0x6e, 0x22, 0x3a,
    0x32, 0x2c, 0x22, 0x63, 0x61, 0x74, 0x65, 0x67,
    0x6f, 0x72, 0x79, 0x22, 0x3a, 0x22, 0x42, 0x49,
    0x4f, 0x53, 0x22, 0x2c, 0x22, 0x74, 0x79, 0x70,
    0x65, 0x22, 0x3a, 0x22, 0x45, 0x61, 0x72, 0x6c,
    0x79, 0x20, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x63,
    0x6f, 0x64, 0x65, 0x20, 0x55, 0x70, 0x64, 0x61,
    0x74, 0x65, 0x22, 0x7d, 0x2c, 0x7b, 0x22, 0x73,
    0x76, 0x6e, 0x22, 0x3a, 0x32, 0x2c, 0x22, 0x63,
    0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22,
    0x3a, 0x22, 0x4f, 0x53, 0x2f, 0x56, 0x4d, 0x4d,
    0x22, 0x2c, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22,
    0x3a, 0x22, 0x53, 0x47, 0x58, 0x20, 0x4c, 0x61,
    0x74, 0x65, 0x20, 0x4d, 0x69, 0x63, 0x72, 0x6f,
    0x63, 0x6f, 0x64, 0x65, 0x20, 0x55, 0x70, 0x64,
    0x61, 0x74, 0x65, 0x22, 0x7d, 0x2c, 0x7b, 0x22,
    0x73, 0x76, 0x6e, 0x22, 0x3a, 0x32, 0x2c, 0x22,
    0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
    0x22, 0x3a, 0x22, 0x4f, 0x53, 0x2f, 0x56, 0x4d,
    0x4d, 0x22, 0x2c, 0x22, 0x74, 0x79, 0x70, 0x65,
    0x22, 0x3a, 0x22, 0x54, 0x58, 0x54, 0x20, 0x53,
    0x49, 0x4e, 0x49, 0x54, 0x22, 0x7d, 0x2c, 0x7b,
    0x22, 0x73, 0x76, 0x6e, 0x22, 0x3a, 0x32, 0x2c,
    0x22, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
    0x79, 0x22, 0x3a, 0x22, 0x42, 0x49, 0x4f, 0x53,
    0x22, 0x7d, 0x2c, 0x7b, 0x22, 0x73, 0x76, 0x6e,
    0x22, 0x3a, 0x33, 0x2c, 0x22, 0x63, 0x61, 0x74,
    0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x3a, 0x22,
    0x42, 0x49, 0x4f, 0x53, 0x22, 0x7d, 0x2c, 0x7b,
    0x22, 0x73, 0x76, 0x6e, 0x22, 0x3a, 0x31, 0x2c,
    0x22, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
    0x79, 0x22, 0x3a, 0x22, 0x42, 0x49, 0x4f, 0x53,
    0x22, 0x7d, 0x2c, 0x7b, 0x22, 0x73, 0x76, 0x6e,
    0x22, 0x3a, 0x30, 0x7d, 0x2c, 0x7b, 0x22, 0x73,
    0x76, 0x6e, 0x22, 0x3a, 0x35, 0x2c, 0x22, 0x63,
    0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22,
    0x3a, 0x22, 0x4f, 0x53, 0x2f, 0x56, 0x4d, 0x4d,
    0x22, 0x2c, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22,
    0x3a, 0x22, 0x53, 0x45, 0x41, 0x4d, 0x4c, 0x44,
    0x52, 0x20, 0x41, 0x43, 0x4d, 0x22, 0x7d, 0x2c,
    0x7b, 0x22, 0x73, 0x76, 0x6e, 0x22, 0x3a, 0x30,
    0x7d, 0x2c, 0x7b, 0x22, 0x73, 0x76, 0x6e, 0x22,
    0x3a, 0x30, 0x7d, 0x2c, 0x7b, 0x22, 0x73, 0x76,
    0x6e, 0x22, 0x3a, 0x30, 0x7d, 0x2c, 0x7b, 0x22,
    0x73, 0x76, 0x6e, 0x22, 0x3a, 0x30, 0x7d, 0x2c,
    0x7b, 0x22, 0x73, 0x76, 0x6e, 0x22, 0x3a, 0x30,
    0x7d, 0x2c, 0x7b, 0x22, 0x73, 0x76, 0x6e, 0x22,
    0x3a, 0x30, 0x7d, 0x2c, 0x7b, 0x22, 0x73, 0x76,
    0x6e, 0x22, 0x3a, 0x30, 0x7d, 0x2c, 0x7b, 0x22,
    0x73, 0x76, 0x6e, 0x22, 0x3a, 0x30, 0x7d, 0x5d,
    0x2c, 0x22, 0x70, 0x63, 0x65, 0x73, 0x76, 0x6e,
    0x22, 0x3a, 0x31, 0x33, 0x2c, 0x22, 0x74, 0x64,
    0x78, 0x74, 0x63, 0x62, 0x63, 0x6f, 0x6d, 0x70,
    0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x3a,
    0x5b, 0x7b, 0x22, 0x73, 0x76, 0x6e, 0x22, 0x3a,
    0x35, 0x2c, 0x22, 0x63, 0x61, 0x74, 0x65, 0x67,
    0x6f, 0x72, 0x79, 0x22, 0x3a, 0x22, 0x4f, 0x53,
    0x2f, 0x56, 0x4d, 0x4d, 0x22, 0x2c, 0x22, 0x74,
    0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x54, 0x44,
    0x58, 0x20, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
    0x22, 0x7d, 0x2c, 0x7b, 0x22, 0x73, 0x76, 0x6e,
    0x22, 0x3a, 0x30, 0x2c, 0x22, 0x63, 0x61, 0x74,
    0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x3a, 0x22,
    0x4f, 0x53, 0x2f, 0x56, 0x4d, 0x4d, 0x22, 0x2c,
    0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22,
    0x54, 0x44, 0x58, 0x20, 0x4d, 0x6f, 0x64, 0x75,
    0x6c, 0x65, 0x22, 0x7d, 0x2c, 0x7b, 0x22, 0x73,
    0x76, 0x6e, 0x22, 0x3a, 0x32, 0x2c, 0x22, 0x63,
    0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22,
    0x3a, 0x22, 0x4f, 0x53, 0x2f, 0x56, 0x4d, 0x4d,
    0x22, 0x2c, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22,
    0x3a, 0x22, 0x54, 0x44, 0x58, 0x20, 0x4c, 0x61,
    0x74, 0x65, 0x20, 0x4d, 0x69, 0x63, 0x72, 0x6f,
    0x63, 0x6f, 0x64, 0x65, 0x20, 0x55, 0x70, 0x64,
    0x61, 0x74, 0x65, 0x22, 0x7d, 0x2c, 0x7b, 0x22,
    0x73, 0x76, 0x6e, 0x22, 0x3a, 0x30, 0x7d, 0x2c,
    0x7b, 0x22, 0x73, 0x76, 0x6e, 0x22, 0x3a, 0x30,
    0x7d, 0x2c, 0x7b, 0x22, 0x73, 0x76, 0x6e, 0x22,
    0x3a, 0x30, 0x7d, 0x2c, 0x7b, 0x22, 0x73, 0x76,
    0x6e, 0x22, 0x3a, 0x30, 0x7d, 0x2c, 0x7b, 0x22,
    0x73, 0x76, 0x6e, 0x22, 0x3a, 0x30, 0x7d, 0x2c,
    0x7b, 0x22, 0x73, 0x76, 0x6e, 0x22, 0x3a, 0x30,
    0x7d, 0x2c, 0x7b, 0x22, 0x73, 0x76, 0x6e, 0x22,
    0x3a, 0x30, 0x7d, 0x2c, 0x7b, 0x22, 0x73, 0x76,
    0x6e, 0x22, 0x3a, 0x30, 0x7d, 0x2c, 0x7b, 0x22,
    0x73, 0x76, 0x6e, 0x22, 0x3a, 0x30, 0x7d, 0x2c,
    0x7b, 0x22, 0x73, 0x76, 0x6e, 0x22, 0x3a, 0x30,
    0x7d, 0x2c, 0x7b, 0x22, 0x73, 0x76, 0x6e, 0x22,
    0x3a, 0x30, 0x7d, 0x2c, 0x7b, 0x22, 0x73, 0x76,
    0x6e, 0x22, 0x3a, 0x30, 0x7d, 0x2c, 0x7b, 0x22,
    0x73, 0x76, 0x6e, 0x22, 0x3a, 0x30, 0x7d, 0x5d,
    0x7d, 0x2c, 0x22, 0x74, 0x63, 0x62, 0x44, 0x61,
    0x74, 0x65, 0x22, 0x3a, 0x22, 0x32, 0x30, 0x32,
    0x34, 0x2d, 0x30, 0x33, 0x2d, 0x31, 0x33, 0x54,
    0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30,
    0x5a, 0x22, 0x2c, 0x22, 0x74, 0x63, 0x62, 0x53,
    0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3a, 0x22,
    0x55, 0x70, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x65,
    0x22, 0x7d, 0x2c, 0x7b, 0x22, 0x74, 0x63, 0x62,
    0x22, 0x3a, 0x7b, 0x22, 0x73, 0x67, 0x78, 0x74,
    0x63, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
    0x65, 0x6e, 0x74, 0x73, 0x22, 0x3a, 0x5b, 0x7b,
    0x22, 0x73, 0x76, 0x6e, 0x22, 0x3a, 0x32, 0x2c,
    0x22, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
    0x79, 0x22, 0x3a, 0x22, 0x42, 0x49, 0x4f, 0x53,
    0x22, 0x2c, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22,
    0x3a, 0x22, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x20,
    0x4d, 0x69, 0x63, 0x72, 0x6f, 0x63, 0x6f, 0x64,
    0x65, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
    0x22, 0x7d, 0x2c, 0x7b, 0x22, 0x73, 0x76, 0x6e,
    0x22, 0x3a, 0x32, 0x2c, 0x22, 0x63, 0x61, 0x74,
    0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x3a, 0x22,
    0x4f, 0x53, 0x2f, 0x56, 0x4d, 0x4d, 0x22, 0x2c,
    0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22,
    0x53, 0x47, 0x58, 0x20, 0x4c, 0x61, 0x74, 0x65,
    0x20, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x63, 0x6f,
    0x64, 0x65, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74,
    0x65, 0x22, 0x7d, 0x2c, 0x7b, 0x22, 0x73, 0x76,
    0x6e, 0x22, 0x3a, 0x32, 0x2c, 0x22, 0x63, 0x61,
    0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x3a,
    0x22, 0x4f, 0x53, 0x2f, 0x56, 0x4d, 0x4d, 0x22,
    0x2c, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a,
    0x22, 0x54, 0x58, 0x54, 0x20, 0x53, 0x49, 0x4e,
    0x49, 0x54, 0x22, 0x7d, 0x2c, 0x7b, 0x22, 0x73,
    0x76, 0x6e, 0x22, 0x3a, 0x32, 0x2c, 0x22, 0x63,
    0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22,
    0x3a, 0x22, 0x42, 0x49, 0x4f, 0x53, 0x22, 0x7d,
    0x2c, 0x7b, 0x22, 0x73, 0x76, 0x6e, 0x22, 0x3a,
    0x33, 0x2c, 0x22, 0x63, 0x61, 0x74, 0x65, 0x67,
    0x6f, 0x72, 0x79, 0x22, 0x3a, 0x22, 0x42, 0x49,
    0x4f, 0x53, 0x22, 0x7d, 0x2c, 0x7b, 0x22, 0x73,
    0x76, 0x6e, 0x22, 0x3a, 0x31, 0x2c, 0x22, 0x63,
    0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22,
    0x3a, 0x22, 0x42, 0x49, 0x4f, 0x53, 0x22, 0x7d,
    0x2c, 0x7b, 0x22, 0x73, 0x76, 0x6e, 0x22, 0x3a,
    0x30, 0x7d, 0x2c, 0x7b, 0x22, 0x73, 0x76, 0x6e,
    0x22, 0x3a, 0x35, 0x2c, 0x22, 0x63, 0x61, 0x74,
    0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x3a, 0x22,
    0x4f, 0x53, 0x2f, 0x56, 0x4d, 0x4d, 0x22, 0x2c,
    0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22,
    0x53, 0x45, 0x41, 0x4d, 0x4c, 0x44, 0x52, 0x20,
    0x41, 0x43, 0x4d, 0x22, 0x7d, 0x2c, 0x7b, 0x22,
    0x73, 0x76, 0x6e, 0x22, 0x3a, 0x30, 0x7d, 0x2c,
    0x7b, 0x22, 0x73, 0x76, 0x6e, 0x22, 0x3a, 0x30,
    0x7d, 0x2c, 0x7b, 0x22, 0x73, 0x76, 0x6e, 0x22,
    0x3a, 0x30, 0x7d, 0x2c, 0x7b, 0x22, 0x73, 0x76,
    0x6e, 0x22, 0x3a, 0x30, 0x7d, 0x2c, 0x7b, 0x22,
    0x73, 0x76, 0x6e, 0x22, 0x3a, 0x30, 0x7d, 0x2c,
    0x7b, 0x22, 0x73, 0x76, 0x6e, 0x22, 0x3a, 0x30,
    0x7d, 0x2c, 0x7b, 0x22, 0x73, 0x76, 0x6e, 0x22,
    0x3a, 0x30, 0x7d, 0x2c, 0x7b, 0x22, 0x73, 0x76,
    0x6e, 0x22, 0x3a, 0x30, 0x7d, 0x5d, 0x2c, 0x22,
    0x70, 0x63, 0x65, 0x73, 0x76, 0x6e, 0x22, 0x3a,
    0x35, 0x2c, 0x22, 0x74, 0x64, 0x78, 0x74, 0x63,
    0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
    0x6e, 0x74, 0x73, 0x22, 0x3a, 0x5b, 0x7b, 0x22,
    0x73, 0x76, 0x6e, 0x22, 0x3a, 0x35, 0x2c, 0x22,
    0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
    0x22, 0x3a, 0x22, 0x4f, 0x53, 0x2f, 0x56, 0x4d,
    0x4d, 0x22, 0x2c, 0x22, 0x74, 0x79, 0x70, 0x65,
    0x22, 0x3a, 0x22, 0x54, 0x44, 0x58, 0x20, 0x4d,
    0x6f, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x7d, 0x2c,
    0x7b, 0x22, 0x73, 0x76, 0x6e, 0x22, 0x3a, 0x30,
    0x2c, 0x22, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
    0x72, 0x79, 0x22, 0x3a, 0x22, 0x4f, 0x53, 0x2f,
    0x56, 0x4d, 0x4d, 0x22, 0x2c, 0x22, 0x74, 0x79,
    0x70, 0x65, 0x22, 0x3a, 0x22, 0x54, 0x44, 0x58,
    0x20, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x22,
    0x7d, 0x2c, 0x7b, 0x22, 0x73, 0x76, 0x6e, 0x22,
    0x3a, 0x32, 0x2c, 0x22, 0x63, 0x61, 0x74, 0x65,
    0x67, 0x6f, 0x72, 0x79, 0x22, 0x3a, 0x22, 0x4f,
    0x53, 0x2f, 0x56, 0x4d, 0x4d, 0x22, 0x2c, 0x22,
    0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x54,
    0x44, 0x58, 0x20, 0x4c, 0x61, 0x74, 0x65, 0x20,
    0x4d, 0x69, 0x63, 0x72, 0x6f, 0x63, 0x6f, 0x64,
    0x65, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
    0x22, 0x7d, 0x2c, 0x7b, 0x22, 0x73, 0x76, 0x6e,
    0x22, 0x3a, 0x30, 0x7d, 0x2c, 0x7b, 0x22, 0x73,
    0x76, 0x6e, 0x22, 0x3a, 0x30, 0x7d, 0x2c, 0x7b,
    0x22, 0x73, 0x76, 0x6e, 0x22, 0x3a, 0x30, 0x7d,
    0x2c, 0x7b, 0x22, 0x73, 0x76, 0x6e, 0x22, 0x3a,
    0x30, 0x7d, 0x2c, 0x7b, 0x22, 0x73, 0x76, 0x6e,
    0x22, 0x3a, 0x30, 0x7d, 0x2c, 0x7b, 0x22, 0x73,
    0x76, 0x6e, 0x22, 0x3a, 0x30, 0x7d, 0x2c, 0x7b,
    0x22, 0x73, 0x76, 0x6e, 0x22, 0x3a, 0x30, 0x7d,
    0x2c, 0x7b, 0x22, 0x73, 0x76, 0x6e, 0x22, 0x3a,
    0x30, 0x7d, 0x2c, 0x7b, 0x22, 0x73, 0x76, 0x6e,
    0x22, 0x3a, 0x30, 0x7d, 0x2c, 0x7b, 0x22, 0x73,
    0x76, 0x6e, 0x22, 0x3a, 0x30, 0x7d, 0x2c, 0x7b,
    0x22, 0x73, 0x76, 0x6e, 0x22, 0x3a, 0x30, 0x7d,
    0x2c, 0x7b, 0x22, 0x73, 0x76, 0x6e, 0x22, 0x3a,
    0x30, 0x7d, 0x2c, 0x7b, 0x22, 0x73, 0x76, 0x6e,
    0x22, 0x3a, 0x30, 0x7d, 0x5d, 0x7d, 0x2c, 0x22,
    0x74, 0x63, 0x62, 0x44, 0x61, 0x74, 0x65, 0x22,
    0x3a, 0x22, 0x32, 0x30, 0x31, 0x38, 0x2d, 0x30,
    0x31, 0x2d, 0x30, 0x34, 0x54, 0x30, 0x30, 0x3a,
    0x30, 0x30, 0x3a, 0x30, 0x30, 0x5a, 0x22, 0x2c,
    0x22, 0x74, 0x63, 0x62, 0x53, 0x74, 0x61, 0x74,
    0x75, 0x73, 0x22, 0x3a, 0x22, 0x4f, 0x75, 0x74,
    0x4f, 0x66, 0x44, 0x61, 0x74, 0x65, 0x22, 0x2c,
    0x22, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72,
    0x79, 0x49, 0x44, 0x73, 0x22, 0x3a, 0x5b, 0x22,
    0x49, 0x4e, 0x54, 0x45, 0x4c, 0x2d, 0x53, 0x41,
    0x2d, 0x30, 0x30, 0x31, 0x30, 0x36, 0x22, 0x2c,
    0x22, 0x49, 0x4e, 0x54, 0x45, 0x4c, 0x2d, 0x53,
    0x41, 0x2d, 0x30, 0x30, 0x31, 0x31, 0x35, 0x22,
    0x2c, 0x22, 0x49, 0x4e, 0x54, 0x45, 0x4c, 0x2d,
    0x53, 0x41, 0x2d, 0x30, 0x30, 0x31, 0x33, 0x35,
    0x22, 0x2c, 0x22, 0x49, 0x4e, 0x54, 0x45, 0x4c,
    0x2d, 0x53, 0x41, 0x2d, 0x30, 0x30, 0x32, 0x30,
    0x33, 0x22, 0x2c, 0x22, 0x49, 0x4e, 0x54, 0x45,
    0x4c, 0x2d, 0x53, 0x41, 0x2d, 0x30, 0x30, 0x32,
    0x32, 0x30, 0x22, 0x2c, 0x22, 0x49, 0x4e, 0x54,
    0x45, 0x4c, 0x2d, 0x53, 0x41, 0x2d, 0x30, 0x30,
    0x32, 0x33, 0x33, 0x22, 0x2c, 0x22, 0x49, 0x4e,
    0x54, 0x45, 0x4c, 0x2d, 0x53, 0x41, 0x2d, 0x30,
    0x30, 0x32, 0x37, 0x30, 0x22, 0x2c, 0x22, 0x49,
    0x4e, 0x54, 0x45, 0x4c, 0x2d, 0x53, 0x41, 0x2d,
    0x30, 0x30, 0x32, 0x39, 0x33, 0x22, 0x2c, 0x22,
    0x49, 0x4e, 0x54, 0x45, 0x4c, 0x2d, 0x53, 0x41,
    0x2d, 0x30, 0x30, 0x33, 0x32, 0x30, 0x22, 0x2c,
    0x22, 0x49, 0x4e, 0x54, 0x45, 0x4c, 0x2d, 0x53,
    0x41, 0x2d, 0x30, 0x30, 0x33, 0x32, 0x39, 0x22,
    0x2c, 0x22, 0x49, 0x4e, 0x54, 0x45, 0x4c, 0x2d,
    0x53, 0x41, 0x2d, 0x30, 0x30, 0x33, 0x38, 0x31,
    0x22, 0x2c, 0x22, 0x49, 0x4e, 0x54, 0x45, 0x4c,
    0x2d, 0x53, 0x41, 0x2d, 0x30, 0x30, 0x33, 0x38,
    0x39, 0x22, 0x2c, 0x22, 0x49, 0x4e, 0x54, 0x45,
    0x4c, 0x2d, 0x53, 0x41, 0x2d, 0x30, 0x30, 0x34,
    0x37, 0x37, 0x22, 0x2c, 0x22, 0x49, 0x4e, 0x54,
    0x45, 0x4c, 0x2d, 0x53, 0x41, 0x2d, 0x30, 0x30,
    0x38, 0x33, 0x37, 0x22, 0x5d, 0x7d, 0x5d, 0x7d,
    0x2c, 0x22, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
    0x75, 0x72, 0x65, 0x22, 0x3a, 0x22, 0x33, 0x36,
    0x36, 0x62, 0x64, 0x34, 0x37, 0x37, 0x37, 0x31,
    0x32, 0x31, 0x61, 0x39, 0x32, 0x33, 0x35, 0x61,
    0x34, 0x32, 0x33, 0x66, 0x36, 0x33, 0x65, 0x37,
    0x32, 0x61, 0x30, 0x66, 0x37, 0x62, 0x32, 0x31,
    0x61, 0x31, 0x39, 0x35, 0x34, 0x63, 0x32, 0x61,
    0x66, 0x64, 0x35, 0x63, 0x31, 0x61, 0x61, 0x63,
    0x62, 0x66, 0x31, 0x65, 0x65, 0x37, 0x64, 0x63,
    0x32, 0x33, 0x66, 0x31, 0x33, 0x34, 0x38, 0x37,
    0x34, 0x38, 0x34, 0x65, 0x30, 0x38, 0x39, 0x62,
    0x64, 0x35, 0x34, 0x64, 0x32, 0x31, 0x37, 0x36,
    0x37, 0x35, 0x31, 0x34, 0x38, 0x63, 0x61, 0x33,
    0x61, 0x38, 0x65, 0x63, 0x61, 0x62, 0x31, 0x36,
    0x37, 0x38, 0x38, 0x36, 0x64, 0x65, 0x63, 0x30,
    0x31, 0x39, 0x37, 0x36, 0x65, 0x64, 0x31, 0x62,
    0x31, 0x36, 0x31, 0x31, 0x63, 0x61, 0x35, 0x37,
    0x66, 0x62, 0x38, 0x63, 0x35, 0x66, 0x22, 0x7d,
    0x00, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45,
    0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54,
    0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d,
    0x2d, 0x2d, 0x2d, 0x2d, 0x0a, 0x4d, 0x49, 0x49,
    0x43, 0x6a, 0x54, 0x43, 0x43, 0x41, 0x6a, 0x4b,
    0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49,
    0x55, 0x66, 0x6a, 0x69, 0x43, 0x31, 0x66, 0x74,
    0x56, 0x4b, 0x55, 0x70, 0x41, 0x53, 0x59, 0x35,
    0x46, 0x68, 0x41, 0x50, 0x70, 0x46, 0x4a, 0x47,
    0x39, 0x39, 0x46, 0x55, 0x77, 0x43, 0x67, 0x59,
    0x49, 0x4b, 0x6f, 0x5a, 0x49, 0x7a, 0x6a, 0x30,
    0x45, 0x41, 0x77, 0x49, 0x77, 0x0a, 0x61, 0x44,
    0x45, 0x61, 0x4d, 0x42, 0x67, 0x47, 0x41, 0x31,
    0x55, 0x45, 0x41, 0x77, 0x77, 0x52, 0x53, 0x57,
    0x35, 0x30, 0x5a, 0x57, 0x77, 0x67, 0x55, 0x30,
    0x64, 0x59, 0x49, 0x46, 0x4a, 0x76, 0x62, 0x33,
    0x51, 0x67, 0x51, 0x30, 0x45, 0x78, 0x47, 0x6a,
    0x41, 0x59, 0x42, 0x67, 0x4e, 0x56, 0x42, 0x41,
    0x6f, 0x4d, 0x45, 0x55, 0x6c, 0x75, 0x64, 0x47,
    0x56, 0x73, 0x49, 0x45, 0x4e, 0x76, 0x0a, 0x63,
    0x6e, 0x42, 0x76, 0x63, 0x6d, 0x46, 0x30, 0x61,
    0x57, 0x39, 0x75, 0x4d, 0x52, 0x51, 0x77, 0x45,
    0x67, 0x59, 0x44, 0x56, 0x51, 0x51, 0x48, 0x44,
    0x41, 0x74, 0x54, 0x59, 0x57, 0x35, 0x30, 0x59,
    0x53, 0x42, 0x44, 0x62, 0x47, 0x46, 0x79, 0x59,
    0x54, 0x45, 0x4c, 0x4d, 0x41, 0x6b, 0x47, 0x41,
    0x31, 0x55, 0x45, 0x43, 0x41, 0x77, 0x43, 0x51,
    0x30, 0x45, 0x78, 0x43, 0x7a, 0x41, 0x4a, 0x0a,
    0x42, 0x67, 0x4e, 0x56, 0x42, 0x41, 0x59, 0x54,
    0x41, 0x6c, 0x56, 0x54, 0x4d, 0x42, 0x34, 0x58,
    0x44, 0x54, 0x49, 0x31, 0x4d, 0x44, 0x55, 0x77,
    0x4e, 0x6a, 0x41, 0x35, 0x4d, 0x6a, 0x55, 0x77,
    0x4d, 0x46, 0x6f, 0x58, 0x44, 0x54, 0x4d, 0x79,
    0x4d, 0x44, 0x55, 0x77, 0x4e, 0x6a, 0x41, 0x35,
    0x4d, 0x6a, 0x55, 0x77, 0x4d, 0x46, 0x6f, 0x77,
    0x62, 0x44, 0x45, 0x65, 0x4d, 0x42, 0x77, 0x47,
    0x0a, 0x41, 0x31, 0x55, 0x45, 0x41, 0x77, 0x77,
    0x56, 0x53, 0x57, 0x35, 0x30, 0x5a, 0x57, 0x77,
    0x67, 0x55, 0x30, 0x64, 0x59, 0x49, 0x46, 0x52,
    0x44, 0x51, 0x69, 0x42, 0x54, 0x61, 0x57, 0x64,
    0x75, 0x61, 0x57, 0x35, 0x6e, 0x4d, 0x52, 0x6f,
    0x77, 0x47, 0x41, 0x59, 0x44, 0x56, 0x51, 0x51,
    0x4b, 0x44, 0x42, 0x46, 0x4a, 0x62, 0x6e, 0x52,
    0x6c, 0x62, 0x43, 0x42, 0x44, 0x62, 0x33, 0x4a,
    0x77, 0x0a, 0x62, 0x33, 0x4a, 0x68, 0x64, 0x47,
    0x6c, 0x76, 0x62, 0x6a, 0x45, 0x55, 0x4d, 0x42,
    0x49, 0x47, 0x41, 0x31, 0x55, 0x45, 0x42, 0x77,
    0x77, 0x4c, 0x55, 0x32, 0x46, 0x75, 0x64, 0x47,
    0x45, 0x67, 0x51, 0x32, 0x78, 0x68, 0x63, 0x6d,
    0x45, 0x78, 0x43, 0x7a, 0x41, 0x4a, 0x42, 0x67,
    0x4e, 0x56, 0x42, 0x41, 0x67, 0x4d, 0x41, 0x6b,
    0x4e, 0x42, 0x4d, 0x51, 0x73, 0x77, 0x43, 0x51,
    0x59, 0x44, 0x0a, 0x56, 0x51, 0x51, 0x47, 0x45,
    0x77, 0x4a, 0x56, 0x55, 0x7a, 0x42, 0x5a, 0x4d,
    0x42, 0x4d, 0x47, 0x42, 0x79, 0x71, 0x47, 0x53,
    0x4d, 0x34, 0x39, 0x41, 0x67, 0x45, 0x47, 0x43,
    0x43, 0x71, 0x47, 0x53, 0x4d, 0x34, 0x39, 0x41,
    0x77, 0x45, 0x48, 0x41, 0x30, 0x49, 0x41, 0x42,
    0x45, 0x4e, 0x46, 0x47, 0x38, 0x78, 0x7a, 0x79,
    0x64, 0x57, 0x52, 0x66, 0x4b, 0x39, 0x32, 0x62,
    0x6d, 0x47, 0x76, 0x0a, 0x50, 0x2b, 0x6d, 0x41,
    0x68, 0x39, 0x31, 0x50, 0x45, 0x79, 0x56, 0x37,
    0x4a, 0x68, 0x36, 0x46, 0x47, 0x4a, 0x64, 0x35,
    0x6e, 0x64, 0x45, 0x39, 0x61, 0x42, 0x48, 0x37,
    0x52, 0x33, 0x45, 0x34, 0x41, 0x37, 0x75, 0x62,
    0x72, 0x6c, 0x68, 0x2f, 0x7a, 0x4e, 0x33, 0x43,
    0x34, 0x78, 0x76, 0x70, 0x6f, 0x6f, 0x75, 0x47,
    0x6c, 0x69, 0x72, 0x4d, 0x62, 0x61, 0x2b, 0x57,
    0x32, 0x6c, 0x6a, 0x75, 0x0a, 0x79, 0x70, 0x61,
    0x6a, 0x67, 0x62, 0x55, 0x77, 0x67, 0x62, 0x49,
    0x77, 0x48, 0x77, 0x59, 0x44, 0x56, 0x52, 0x30,
    0x6a, 0x42, 0x42, 0x67, 0x77, 0x46, 0x6f, 0x41,
    0x55, 0x49, 0x6d, 0x55, 0x4d, 0x31, 0x6c, 0x71,
    0x64, 0x4e, 0x49, 0x6e, 0x7a, 0x67, 0x37, 0x53,
    0x56, 0x55, 0x72, 0x39, 0x51, 0x47, 0x7a, 0x6b,
    0x6e, 0x42, 0x71, 0x77, 0x77, 0x55, 0x67, 0x59,
    0x44, 0x56, 0x52, 0x30, 0x66, 0x0a, 0x42, 0x45,
    0x73, 0x77, 0x53, 0x54, 0x42, 0x48, 0x6f, 0x45,
    0x57, 0x67, 0x51, 0x34, 0x5a, 0x42, 0x61, 0x48,
    0x52, 0x30, 0x63, 0x48, 0x4d, 0x36, 0x4c, 0x79,
    0x39, 0x6a, 0x5a, 0x58, 0x4a, 0x30, 0x61, 0x57,
    0x5a, 0x70, 0x59, 0x32, 0x46, 0x30, 0x5a, 0x58,
    0x4d, 0x75, 0x64, 0x48, 0x4a, 0x31, 0x63, 0x33,
    0x52, 0x6c, 0x5a, 0x48, 0x4e, 0x6c, 0x63, 0x6e,
    0x5a, 0x70, 0x59, 0x32, 0x56, 0x7a, 0x0a, 0x4c,
    0x6d, 0x6c, 0x75, 0x64, 0x47, 0x56, 0x73, 0x4c,
    0x6d, 0x4e, 0x76, 0x62, 0x53, 0x39, 0x4a, 0x62,
    0x6e, 0x52, 0x6c, 0x62, 0x46, 0x4e, 0x48, 0x57,
    0x46, 0x4a, 0x76, 0x62, 0x33, 0x52, 0x44, 0x51,
    0x53, 0x35, 0x6b, 0x5a, 0x58, 0x49, 0x77, 0x48,
    0x51, 0x59, 0x44, 0x56, 0x52, 0x30, 0x4f, 0x42,
    0x42, 0x59, 0x45, 0x46, 0x48, 0x34, 0x34, 0x67,
    0x74, 0x58, 0x37, 0x56, 0x53, 0x6c, 0x4b, 0x0a,
    0x51, 0x45, 0x6d, 0x4f, 0x52, 0x59, 0x51, 0x44,
    0x36, 0x52, 0x53, 0x52, 0x76, 0x66, 0x52, 0x56,
    0x4d, 0x41, 0x34, 0x47, 0x41, 0x31, 0x55, 0x64,
    0x44, 0x77, 0x45, 0x42, 0x2f, 0x77, 0x51, 0x45,
    0x41, 0x77, 0x49, 0x47, 0x77, 0x44, 0x41, 0x4d,
    0x42, 0x67, 0x4e, 0x56, 0x48, 0x52, 0x4d, 0x42,
    0x41, 0x66, 0x38, 0x45, 0x41, 0x6a, 0x41, 0x41,
    0x4d, 0x41, 0x6f, 0x47, 0x43, 0x43, 0x71, 0x47,
    0x0a, 0x53, 0x4d, 0x34, 0x39, 0x42, 0x41, 0x4d,
    0x43, 0x41, 0x30, 0x6b, 0x41, 0x4d, 0x45, 0x59,
    0x43, 0x49, 0x51, 0x44, 0x64, 0x6d, 0x6d, 0x52,
    0x75, 0x41, 0x6f, 0x33, 0x71, 0x43, 0x4f, 0x38,
    0x54, 0x43, 0x31, 0x49, 0x6f, 0x4a, 0x4d, 0x49,
    0x54, 0x41, 0x6f, 0x4f, 0x45, 0x77, 0x34, 0x64,
    0x6c, 0x67, 0x45, 0x42, 0x48, 0x7a, 0x53, 0x7a,
    0x31, 0x54, 0x75, 0x4d, 0x53, 0x54, 0x41, 0x49,
    0x68, 0x0a, 0x41, 0x4b, 0x56, 0x54, 0x71, 0x4f,
    0x6b, 0x74, 0x35, 0x39, 0x2b, 0x63, 0x6f, 0x30,
    0x4f, 0x33, 0x6d, 0x33, 0x68, 0x43, 0x2b, 0x76,
    0x35, 0x46, 0x62, 0x30, 0x30, 0x46, 0x6a, 0x59,
    0x57, 0x63, 0x67, 0x65, 0x75, 0x33, 0x45, 0x69,
    0x6a, 0x4f, 0x55, 0x4c, 0x6f, 0x35, 0x0a, 0x2d,
    0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20,
    0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43,
    0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
    0x0a, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45,
    0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54,
    0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d,
    0x2d, 0x2d, 0x2d, 0x2d, 0x0a, 0x4d, 0x49, 0x49,
    0x43, 0x6a, 0x7a, 0x43, 0x43, 0x41, 0x6a, 0x53,
    0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49,
    0x55, 0x49, 0x6d, 0x55, 0x4d, 0x31, 0x6c, 0x71,
    0x64, 0x4e, 0x49, 0x6e, 0x7a, 0x67, 0x37, 0x53,
    0x56, 0x55, 0x72, 0x39, 0x51, 0x47, 0x7a, 0x6b,
    0x6e, 0x42, 0x71, 0x77, 0x77, 0x43, 0x67, 0x59,
    0x49, 0x4b, 0x6f, 0x5a, 0x49, 0x7a, 0x6a, 0x30,
    0x45, 0x41, 0x77, 0x49, 0x77, 0x0a, 0x61, 0x44,
    0x45, 0x61, 0x4d, 0x42, 0x67, 0x47, 0x41, 0x31,
    0x55, 0x45, 0x41, 0x77, 0x77, 0x52, 0x53, 0x57,
    0x35, 0x30, 0x5a, 0x57, 0x77, 0x67, 0x55, 0x30,
    0x64, 0x59, 0x49, 0x46, 0x4a, 0x76, 0x62, 0x33,
    0x51, 0x67, 0x51, 0x30, 0x45, 0x78, 0x47, 0x6a,
    0x41, 0x59, 0x42, 0x67, 0x4e, 0x56, 0x42, 0x41,
    0x6f, 0x4d, 0x45, 0x55, 0x6c, 0x75, 0x64, 0x47,
    0x56, 0x73, 0x49, 0x45, 0x4e, 0x76, 0x0a, 0x63,
    0x6e, 0x42, 0x76, 0x63, 0x6d, 0x46, 0x30, 0x61,
    0x57, 0x39, 0x75, 0x4d, 0x52, 0x51, 0x77, 0x45,
    0x67, 0x59, 0x44, 0x56, 0x51, 0x51, 0x48, 0x44,
    0x41, 0x74, 0x54, 0x59, 0x57, 0x35, 0x30, 0x59,
    0x53, 0x42, 0x44, 0x62, 0x47, 0x46, 0x79, 0x59,
    0x54, 0x45, 0x4c, 0x4d, 0x41, 0x6b, 0x47, 0x41,
    0x31, 0x55, 0x45, 0x43, 0x41, 0x77, 0x43, 0x51,
    0x30, 0x45, 0x78, 0x43, 0x7a, 0x41, 0x4a, 0x0a,
    0x42, 0x67, 0x4e, 0x56, 0x42, 0x41, 0x59, 0x54,
    0x41, 0x6c, 0x56, 0x54, 0x4d, 0x42, 0x34, 0x58,
    0x44, 0x54, 0x45, 0x34, 0x4d, 0x44, 0x55, 0x79,
    0x4d, 0x54, 0x45, 0x77, 0x4e, 0x44, 0x55, 0x78,
    0x4d, 0x46, 0x6f, 0x58, 0x44, 0x54, 0x51, 0x35,
    0x4d, 0x54, 0x49, 0x7a, 0x4d, 0x54, 0x49, 0x7a,
    0x4e, 0x54, 0x6b, 0x31, 0x4f, 0x56, 0x6f, 0x77,
    0x61, 0x44, 0x45, 0x61, 0x4d, 0x42, 0x67, 0x47,
    0x0a, 0x41, 0x31, 0x55, 0x45, 0x41, 0x77, 0x77,
    0x52, 0x53, 0x57, 0x35, 0x30, 0x5a, 0x57, 0x77,
    0x67, 0x55, 0x30, 0x64, 0x59, 0x49, 0x46, 0x4a,
    0x76, 0x62, 0x33, 0x51, 0x67, 0x51, 0x30, 0x45,
    0x78, 0x47, 0x6a, 0x41, 0x59, 0x42, 0x67, 0x4e,
    0x56, 0x42, 0x41, 0x6f, 0x4d, 0x45, 0x55, 0x6c,
    0x75, 0x64, 0x47, 0x56, 0x73, 0x49, 0x45, 0x4e,
    0x76, 0x63, 0x6e, 0x42, 0x76, 0x63, 0x6d, 0x46,
    0x30, 0x0a, 0x61, 0x57, 0x39, 0x75, 0x4d, 0x52,
    0x51, 0x77, 0x45, 0x67, 0x59, 0x44, 0x56, 0x51,
    0x51, 0x48, 0x44, 0x41, 0x74, 0x54, 0x59, 0x57,
    0x35, 0x30, 0x59, 0x53, 0x42, 0x44, 0x62, 0x47,
    0x46, 0x79, 0x59, 0x54, 0x45, 0x4c, 0x4d, 0x41,
    0x6b, 0x47, 0x41, 0x31, 0x55, 0x45, 0x43, 0x41,
    0x77, 0x43, 0x51, 0x30, 0x45, 0x78, 0x43, 0x7a,
    0x41, 0x4a, 0x42, 0x67, 0x4e, 0x56, 0x42, 0x41,
    0x59, 0x54, 0x0a, 0x41, 0x6c, 0x56, 0x54, 0x4d,
    0x46, 0x6b, 0x77, 0x45, 0x77, 0x59, 0x48, 0x4b,
    0x6f, 0x5a, 0x49, 0x7a, 0x6a, 0x30, 0x43, 0x41,
    0x51, 0x59, 0x49, 0x4b, 0x6f, 0x5a, 0x49, 0x7a,
    0x6a, 0x30, 0x44, 0x41, 0x51, 0x63, 0x44, 0x51,
    0x67, 0x41, 0x45, 0x43, 0x36, 0x6e, 0x45, 0x77,
    0x4d, 0x44, 0x49, 0x59, 0x5a, 0x4f, 0x6a, 0x2f,
    0x69, 0x50, 0x57, 0x73, 0x43, 0x7a, 0x61, 0x45,
    0x4b, 0x69, 0x37, 0x0a, 0x31, 0x4f, 0x69, 0x4f,
    0x53, 0x4c, 0x52, 0x46, 0x68, 0x57, 0x47, 0x6a,
    0x62, 0x6e, 0x42, 0x56, 0x4a, 0x66, 0x56, 0x6e,
    0x6b, 0x59, 0x34, 0x75, 0x33, 0x49, 0x6a, 0x6b,
    0x44, 0x59, 0x59, 0x4c, 0x30, 0x4d, 0x78, 0x4f,
    0x34, 0x6d, 0x71, 0x73, 0x79, 0x59, 0x6a, 0x6c,
    0x42, 0x61, 0x6c, 0x54, 0x56, 0x59, 0x78, 0x46,
    0x50, 0x32, 0x73, 0x4a, 0x42, 0x4b, 0x35, 0x7a,
    0x6c, 0x4b, 0x4f, 0x42, 0x0a, 0x75, 0x7a, 0x43,
    0x42, 0x75, 0x44, 0x41, 0x66, 0x42, 0x67, 0x4e,
    0x56, 0x48, 0x53, 0x4d, 0x45, 0x47, 0x44, 0x41,
    0x57, 0x67, 0x42, 0x51, 0x69, 0x5a, 0x51, 0x7a,
    0x57, 0x57, 0x70, 0x30, 0x30, 0x69, 0x66, 0x4f,
    0x44, 0x74, 0x4a, 0x56, 0x53, 0x76, 0x31, 0x41,
    0x62, 0x4f, 0x53, 0x63, 0x47, 0x72, 0x44, 0x42,
    0x53, 0x42, 0x67, 0x4e, 0x56, 0x48, 0x52, 0x38,
    0x45, 0x53, 0x7a, 0x42, 0x4a, 0x0a, 0x4d, 0x45,
    0x65, 0x67, 0x52, 0x61, 0x42, 0x44, 0x68, 0x6b,
    0x46, 0x6f, 0x64, 0x48, 0x52, 0x77, 0x63, 0x7a,
    0x6f, 0x76, 0x4c, 0x32, 0x4e, 0x6c, 0x63, 0x6e,
    0x52, 0x70, 0x5a, 0x6d, 0x6c, 0x6a, 0x59, 0x58,
    0x52, 0x6c, 0x63, 0x79, 0x35, 0x30, 0x63, 0x6e,
    0x56, 0x7a, 0x64, 0x47, 0x56, 0x6b, 0x63, 0x32,
    0x56, 0x79, 0x64, 0x6d, 0x6c, 0x6a, 0x5a, 0x58,
    0x4d, 0x75, 0x61, 0x57, 0x35, 0x30, 0x0a, 0x5a,
    0x57, 0x77, 0x75, 0x59, 0x32, 0x39, 0x74, 0x4c,
    0x30, 0x6c, 0x75, 0x64, 0x47, 0x56, 0x73, 0x55,
    0x30, 0x64, 0x59, 0x55, 0x6d, 0x39, 0x76, 0x64,
    0x45, 0x4e, 0x42, 0x4c, 0x6d, 0x52, 0x6c, 0x63,
    0x6a, 0x41, 0x64, 0x42, 0x67, 0x4e, 0x56, 0x48,
    0x51, 0x34, 0x45, 0x46, 0x67, 0x51, 0x55, 0x49,
    0x6d, 0x55, 0x4d, 0x31, 0x6c, 0x71, 0x64, 0x4e,
    0x49, 0x6e, 0x7a, 0x67, 0x37, 0x53, 0x56, 0x0a,
    0x55, 0x72, 0x39, 0x51, 0x47, 0x7a, 0x6b, 0x6e,
    0x42, 0x71, 0x77, 0x77, 0x44, 0x67, 0x59, 0x44,
    0x56, 0x52, 0x30, 0x50, 0x41, 0x51, 0x48, 0x2f,
    0x42, 0x41, 0x51, 0x44, 0x41, 0x67, 0x45, 0x47,
    0x4d, 0x42, 0x49, 0x47, 0x41, 0x31, 0x55, 0x64,
    0x45, 0x77, 0x45, 0x42, 0x2f, 0x77, 0x51, 0x49,
    0x4d, 0x41, 0x59, 0x42, 0x41, 0x66, 0x38, 0x43,
    0x41, 0x51, 0x45, 0x77, 0x43, 0x67, 0x59, 0x49,
    0x0a, 0x4b, 0x6f, 0x5a, 0x49, 0x7a, 0x6a, 0x30,
    0x45, 0x41, 0x77, 0x49, 0x44, 0x53, 0x51, 0x41,
    0x77, 0x52, 0x67, 0x49, 0x68, 0x41, 0x4f, 0x57,
    0x2f, 0x35, 0x51, 0x6b, 0x52, 0x2b, 0x53, 0x39,
    0x43, 0x69, 0x53, 0x44, 0x63, 0x4e, 0x6f, 0x6f,
    0x77, 0x4c, 0x75, 0x50, 0x52, 0x4c, 0x73, 0x57,
    0x47, 0x66, 0x2f, 0x59, 0x69, 0x37, 0x47, 0x53,
    0x58, 0x39, 0x34, 0x42, 0x67, 0x77, 0x54, 0x77,
    0x67, 0x0a, 0x41, 0x69, 0x45, 0x41, 0x34, 0x4a,
    0x30, 0x6c, 0x72, 0x48, 0x6f, 0x4d, 0x73, 0x2b,
    0x58, 0x6f, 0x35, 0x6f, 0x2f, 0x73, 0x58, 0x36,
    0x4f, 0x39, 0x51, 0x57, 0x78, 0x48, 0x52, 0x41,
    0x76, 0x5a, 0x55, 0x47, 0x4f, 0x64, 0x52, 0x51,
    0x37, 0x63, 0x76, 0x71, 0x52, 0x58, 0x61, 0x71,
    0x49, 0x3d, 0x0a, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
    0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54,
    0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d,
    0x2d, 0x2d, 0x2d, 0x2d, 0x0a, 0x00, 0x7b, 0x22,
    0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x49,
    0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22,
    0x3a, 0x7b, 0x22, 0x69, 0x64, 0x22, 0x3a, 0x22,
    0x54, 0x44, 0x5f, 0x51, 0x45, 0x22, 0x2c, 0x22,
    0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
    0x3a, 0x32, 0x2c, 0x22, 0x69, 0x73, 0x73, 0x75,
    0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x22,
    0x32, 0x30, 0x32, 0x35, 0x2d, 0x30, 0x36, 0x2d,
    0x32, 0x35, 0x54, 0x31, 0x36, 0x3a, 0x35, 0x35,
    0x3a, 0x31, 0x32, 0x5a, 0x22, 0x2c, 0x22, 0x6e,
    0x65, 0x78, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
    0x65, 0x22, 0x3a, 0x22, 0x32, 0x30, 0x32, 0x35,
    0x2d, 0x30, 0x37, 0x2d, 0x32, 0x35, 0x54, 0x31,
    0x36, 0x3a, 0x35, 0x35, 0x3a, 0x31, 0x32, 0x5a,
    0x22, 0x2c, 0x22, 0x74, 0x63, 0x62, 0x45, 0x76,
    0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
    0x44, 0x61, 0x74, 0x61, 0x4e, 0x75, 0x6d, 0x62,
    0x65, 0x72, 0x22, 0x3a, 0x31, 0x37, 0x2c, 0x22,
    0x6d, 0x69, 0x73, 0x63, 0x73, 0x65, 0x6c, 0x65,
    0x63, 0x74, 0x22, 0x3a, 0x22, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x22, 0x2c, 0x22,
    0x6d, 0x69, 0x73, 0x63, 0x73, 0x65, 0x6c, 0x65,
    0x63, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x3a,
    0x22, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46,
    0x46, 0x22, 0x2c, 0x22, 0x61, 0x74, 0x74, 0x72,
    0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x3a,
    0x22, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x22, 0x2c, 0x22, 0x61, 0x74, 0x74, 0x72,
    0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x4d, 0x61,
    0x73, 0x6b, 0x22, 0x3a, 0x22, 0x46, 0x42, 0x46,
    0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46,
    0x46, 0x46, 0x46, 0x46, 0x46, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x22, 0x2c, 0x22,
    0x6d, 0x72, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72,
    0x22, 0x3a, 0x22, 0x44, 0x43, 0x39, 0x45, 0x32,
    0x41, 0x37, 0x43, 0x36, 0x46, 0x39, 0x34, 0x38,
    0x46, 0x31, 0x37, 0x34, 0x37, 0x34, 0x45, 0x33,
    0x34, 0x41, 0x37, 0x46, 0x43, 0x34, 0x33, 0x45,
    0x44, 0x30, 0x33, 0x30, 0x46, 0x37, 0x43, 0x31,
    0x35, 0x36, 0x33, 0x46, 0x31, 0x42, 0x41, 0x42,
    0x44, 0x44, 0x46, 0x36, 0x33, 0x34, 0x30, 0x43,
    0x38, 0x32, 0x45, 0x30, 0x45, 0x35, 0x34, 0x41,
    0x38, 0x43, 0x35, 0x22, 0x2c, 0x22, 0x69, 0x73,
    0x76, 0x70, 0x72, 0x6f, 0x64, 0x69, 0x64, 0x22,
    0x3a, 0x32, 0x2c, 0x22, 0x74, 0x63, 0x62, 0x4c,
    0x65, 0x76, 0x65, 0x6c, 0x73, 0x22, 0x3a, 0x5b,
    0x7b, 0x22, 0x74, 0x63, 0x62, 0x22, 0x3a, 0x7b,
    0x22, 0x69, 0x73, 0x76, 0x73, 0x76, 0x6e, 0x22,
    0x3a, 0x34, 0x7d, 0x2c, 0x22, 0x74, 0x63, 0x62,
    0x44, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x22, 0x32,
    0x30, 0x32, 0x34, 0x2d, 0x30, 0x33, 0x2d, 0x31,
    0x33, 0x54, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a,
    0x30, 0x30, 0x5a, 0x22, 0x2c, 0x22, 0x74, 0x63,
    0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
    0x3a, 0x22, 0x55, 0x70, 0x54, 0x6f, 0x44, 0x61,
    0x74, 0x65, 0x22, 0x7d, 0x5d, 0x7d, 0x2c, 0x22,
    0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
    0x65, 0x22, 0x3a, 0x22, 0x33, 0x65, 0x34, 0x64,
    0x66, 0x62, 0x64, 0x38, 0x63, 0x38, 0x33, 0x32,
    0x36, 0x35, 0x63, 0x61, 0x36, 0x39, 0x38, 0x36,
    0x31, 0x66, 0x37, 0x32, 0x39, 0x61, 0x35, 0x34,
    0x33, 0x62, 0x63, 0x31, 0x64, 0x38, 0x34, 0x34,
    0x37, 0x62, 0x33, 0x36, 0x32, 0x35, 0x35, 0x35,
    0x62, 0x62, 0x61, 0x35, 0x33, 0x34, 0x31, 0x34,
    0x31, 0x64, 0x61, 0x61, 0x63, 0x62, 0x62, 0x37,
    0x35, 0x62, 0x62, 0x34, 0x61, 0x34, 0x37, 0x37,
    0x36, 0x64, 0x62, 0x61, 0x37, 0x66, 0x35, 0x31,
    0x64, 0x62, 0x37, 0x66, 0x39, 0x37, 0x39, 0x37,
    0x64, 0x38, 0x61, 0x66, 0x33, 0x35, 0x36, 0x31,
    0x36, 0x65, 0x33, 0x65, 0x65, 0x66, 0x33, 0x33,
    0x38, 0x33, 0x34, 0x62, 0x30, 0x36, 0x33, 0x30,
    0x34, 0x36, 0x64, 0x33, 0x36, 0x34, 0x62, 0x62,
    0x36, 0x39, 0x64, 0x32, 0x37, 0x31, 0x64, 0x31,
    0x61, 0x37, 0x38, 0x31, 0x22, 0x7d, 0x00,
];

//==============================================================================
// Real servtd_get_quote implementation structures (from mikbras/tdtools)
//==============================================================================

/// Global collateral storage for the servtd_get_quote function
static COLLATERAL: Mutex<Vec<u8>> = Mutex::new(Vec::new());

/// Ensure the collateral is initialized only once
static INIT: Once = Once::new();

/// Build PackedCollateral binary data from TOML configuration
fn build_packed_collateral_from_toml(config: &CollateralConfig) -> Result<Vec<u8>, Box<dyn std::error::Error>> {
    let mut result = Vec::new();
    
    // Create the header (PackedCollateral structure)
    let major_version = config.major_version.unwrap_or(3);
    let minor_version = config.minor_version.unwrap_or(0);
    
    // Convert string data to bytes and add null terminators to match hardcoded format
    let mut pck_crl_issuer_chain_bytes = config.pck_crl_issuer_chain.as_bytes().to_vec();
    pck_crl_issuer_chain_bytes.push(0); // Add null terminator
    
    let mut root_ca_crl_bytes = config.root_ca_crl.as_bytes().to_vec();
    root_ca_crl_bytes.push(0); // Add null terminator
    
    let mut pck_crl_bytes = config.pck_crl.as_bytes().to_vec();
    pck_crl_bytes.push(0); // Add null terminator
    
    let mut tcb_info_issuer_chain_bytes = config.tcb_info_issuer_chain.as_bytes().to_vec();
    tcb_info_issuer_chain_bytes.push(0); // Add null terminator
    
    let mut tcb_info_bytes = config.tcb_info.as_bytes().to_vec();
    // Add null terminator for quote verification
    tcb_info_bytes.push(0);
    
    let mut qe_identity_issuer_chain_bytes = config.qe_identity_issuer_chain.as_bytes().to_vec();
    qe_identity_issuer_chain_bytes.push(0); // Add null terminator
    
    let mut qe_identity_bytes = config.qe_identity.as_bytes().to_vec();
    // Add null terminator for quote verification
    qe_identity_bytes.push(0);
    
    // Optional validation: check if pck_crl_size matches actual size
    if let Some(expected_size) = config.pck_crl_size {
        if pck_crl_bytes.len() != expected_size as usize {
            println!("Warning: PCK CRL size mismatch. Expected: {}, Actual: {}", 
                    expected_size, pck_crl_bytes.len());
        }
    }
    
    // Build PackedCollateral header
    result.extend_from_slice(&major_version.to_le_bytes());
    result.extend_from_slice(&minor_version.to_le_bytes());
    result.extend_from_slice(&(pck_crl_issuer_chain_bytes.len() as u32).to_le_bytes());
    result.extend_from_slice(&(root_ca_crl_bytes.len() as u32).to_le_bytes());
    result.extend_from_slice(&(pck_crl_bytes.len() as u32).to_le_bytes());
    result.extend_from_slice(&(tcb_info_issuer_chain_bytes.len() as u32).to_le_bytes());
    result.extend_from_slice(&(tcb_info_bytes.len() as u32).to_le_bytes());
    result.extend_from_slice(&(qe_identity_issuer_chain_bytes.len() as u32).to_le_bytes());
    result.extend_from_slice(&(qe_identity_bytes.len() as u32).to_le_bytes());
    
    // Append data in the order specified by tdtools:
    // [pck_crl_issuer_chain bytes]
    // [root_ca_crl bytes]
    // [pck_crl bytes]
    // [tcb_info_issuer_chain bytes]
    // [tcb_info bytes]
    // [qe_identity_issuer_chain bytes]
    // [qe_identity bytes]
    result.extend_from_slice(&pck_crl_issuer_chain_bytes);
    result.extend_from_slice(&root_ca_crl_bytes);
    result.extend_from_slice(&pck_crl_bytes);
    result.extend_from_slice(&tcb_info_issuer_chain_bytes);
    result.extend_from_slice(&tcb_info_bytes);
    result.extend_from_slice(&qe_identity_issuer_chain_bytes);
    result.extend_from_slice(&qe_identity_bytes);
    
    Ok(result)
}

/// Load collateral from TOML file if it exists
fn load_collateral_from_toml(toml_path: &str) -> Option<Vec<u8>> {
    if !Path::new(toml_path).exists() {
        return None;
    }
    
    match fs::read_to_string(toml_path) {
        Ok(content) => {
            match toml::from_str::<CollateralConfig>(&content) {
                Ok(config) => {
                    match build_packed_collateral_from_toml(&config) {
                        Ok(data) => {
                            println!("Successfully loaded collateral from TOML file: {}", toml_path);
                            Some(data)
                        }
                        Err(e) => {
                            println!("Error building collateral from TOML: {}", e);
                            None
                        }
                    }
                }
                Err(e) => {
                    println!("Error parsing TOML file {}: {}", toml_path, e);
                    None
                }
            }
        }
        Err(e) => {
            println!("Error reading TOML file {}: {}", toml_path, e);
            None
        }
    }
}

/// Load collateral from policy files if they exist and contain collateral data
/// Searches for policy.toml in common locations and extracts collateral section
fn load_collateral_from_policy() -> Option<Vec<u8>> {
    let policy_paths = [
        "policy.toml",  // Current directory
        "config/policy.toml",  // Config directory
        "src/policy/test/policy.toml",  // Test directory relative path
        "/home/bodzhang/MigTD/config/policy.toml",  // Absolute path to config
        "/home/bodzhang/MigTD/src/policy/test/policy.toml",  // Absolute test path
    ];
    
    for policy_path in &policy_paths {
        if !Path::new(policy_path).exists() {
            continue;
        }
        
        match fs::read_to_string(policy_path) {
            Ok(content) => {
                // Try to parse the policy file and extract collateral
                match policy::MigPolicyWithCollateral::from_toml(&content) {
                    Ok(policy_with_collateral) => {
                        if let Some(collateral_config) = policy_with_collateral.get_collateral() {
                            // Convert policy::CollateralConfig to our local CollateralConfig
                            let local_config = CollateralConfig {
                                major_version: None, // Not provided in policy CollateralConfig
                                minor_version: None, // Not provided in policy CollateralConfig
                                pck_crl_issuer_chain: collateral_config.pck_crl_issuer_chain.clone(),
                                root_ca_crl: collateral_config.root_ca_crl.clone(),
                                pck_crl_size: None, // Not provided in policy CollateralConfig
                                pck_crl: collateral_config.pck_crl.clone(),
                                tcb_info_issuer_chain: collateral_config.tcb_info_issuer_chain.clone(),
                                tcb_info: collateral_config.tcb_info.clone(),
                                qe_identity_issuer_chain: collateral_config.qe_identity_issuer_chain.clone(),
                                qe_identity: collateral_config.qe_identity.clone(),
                            };
                            
                            match build_packed_collateral_from_toml(&local_config) {
                                Ok(data) => {
                                    println!("Successfully loaded collateral from policy file: {}", policy_path);
                                    return Some(data);
                                }
                                Err(e) => {
                                    println!("Error building collateral from policy file {}: {}", policy_path, e);
                                }
                            }
                        } else {
                            println!("Policy file {} found but contains no collateral section", policy_path);
                        }
                    }
                    Err(e) => {
                        println!("Error parsing policy file {}: {:?}", policy_path, e);
                    }
                }
            }
            Err(e) => {
                println!("Error reading policy file {}: {}", policy_path, e);
            }
        }
    }
    
    None
}




/// Initialize collateral from policy data
/// This is the preferred initialization method when running in migtd context
/// Returns true if successful, false if policy data doesn't contain collateral
pub fn init_collateral_from_policy(policy_data: &[u8]) -> bool {
    // Only allow initialization once
    INIT.call_once(|| {
        // Try to extract collateral from the policy data
        if let Ok(policy_str) = core::str::from_utf8(policy_data) {
            match policy::MigPolicyWithCollateral::from_str(policy_str) {
                Ok(policy_with_collateral) => {
                    if let Some(collateral_config) = policy_with_collateral.get_collateral() {
                        println!("DEBUG: Found collateral in policy data");
                        
                        // Convert policy::CollateralConfig to our local CollateralConfig
                        let local_config = CollateralConfig {
                            major_version: None,
                            minor_version: None,
                            pck_crl_issuer_chain: collateral_config.pck_crl_issuer_chain.clone(),
                            root_ca_crl: collateral_config.root_ca_crl.clone(),
                            pck_crl_size: None,
                            pck_crl: collateral_config.pck_crl.clone(),
                            tcb_info_issuer_chain: collateral_config.tcb_info_issuer_chain.clone(),
                            tcb_info: collateral_config.tcb_info.clone(),
                            qe_identity_issuer_chain: collateral_config.qe_identity_issuer_chain.clone(),
                            qe_identity: collateral_config.qe_identity.clone(),
                        };
                        
                        println!("DEBUG: Policy collateral config lengths:");
                        println!("  pck_crl_issuer_chain: {} bytes", local_config.pck_crl_issuer_chain.len());
                        println!("  root_ca_crl: {} bytes", local_config.root_ca_crl.len());
                        println!("  pck_crl: {} bytes", local_config.pck_crl.len());
                        println!("  tcb_info_issuer_chain: {} bytes", local_config.tcb_info_issuer_chain.len());
                        println!("  tcb_info: {} bytes", local_config.tcb_info.len());
                        println!("  qe_identity_issuer_chain: {} bytes", local_config.qe_identity_issuer_chain.len());
                        println!("  qe_identity: {} bytes", local_config.qe_identity.len());
                        
                        match build_packed_collateral_from_toml(&local_config) {
                            Ok(packed_data) => {
                                println!("DEBUG: Successfully built packed collateral from policy ({} bytes)", packed_data.len());
                                
                                // Compare with hardcoded collateral
                                println!("DEBUG: Hardcoded collateral size: {} bytes", HARDCODED_COLLATERAL.len());
                                
                                if packed_data.len() != HARDCODED_COLLATERAL.len() {
                                    println!("DEBUG: SIZE MISMATCH! Policy: {}, Hardcoded: {}", 
                                            packed_data.len(), HARDCODED_COLLATERAL.len());
                                } else {
                                    println!("DEBUG: Sizes match, checking content...");
                                    let mut differences = 0;
                                    for (i, (policy_byte, hardcoded_byte)) in packed_data.iter().zip(HARDCODED_COLLATERAL.iter()).enumerate() {
                                        if policy_byte != hardcoded_byte {
                                            differences += 1;
                                            if differences <= 10 { // Show first 10 differences
                                                println!("DEBUG: Byte {} differs: policy=0x{:02x}, hardcoded=0x{:02x}", 
                                                        i, policy_byte, hardcoded_byte);
                                            }
                                        }
                                    }
                                    if differences == 0 {
                                        println!("DEBUG: Content matches perfectly!");
                                    } else {
                                        println!("DEBUG: Found {} total differences", differences);
                                    }
                                }
                                
                                // Compare headers
                                if packed_data.len() >= core::mem::size_of::<PackedCollateral>() && 
                                   HARDCODED_COLLATERAL.len() >= core::mem::size_of::<PackedCollateral>() {
                                    unsafe {
                                        let policy_header = &*(packed_data.as_ptr() as *const PackedCollateral);
                                        let hardcoded_header = &*(HARDCODED_COLLATERAL.as_ptr() as *const PackedCollateral);
                                        
                                        println!("DEBUG: Header comparison:");
                                        println!("  major_version: policy={}, hardcoded={}", 
                                                policy_header.major_version, hardcoded_header.major_version);
                                        println!("  minor_version: policy={}, hardcoded={}", 
                                                policy_header.minor_version, hardcoded_header.minor_version);
                                        println!("  pck_crl_issuer_chain_size: policy={}, hardcoded={}", 
                                                policy_header.pck_crl_issuer_chain_size, hardcoded_header.pck_crl_issuer_chain_size);
                                        println!("  root_ca_crl_size: policy={}, hardcoded={}", 
                                                policy_header.root_ca_crl_size, hardcoded_header.root_ca_crl_size);
                                        println!("  pck_crl_size: policy={}, hardcoded={}", 
                                                policy_header.pck_crl_size, hardcoded_header.pck_crl_size);
                                        println!("  tcb_info_issuer_chain_size: policy={}, hardcoded={}", 
                                                policy_header.tcb_info_issuer_chain_size, hardcoded_header.tcb_info_issuer_chain_size);
                                        println!("  tcb_info_size: policy={}, hardcoded={}", 
                                                policy_header.tcb_info_size, hardcoded_header.tcb_info_size);
                                        println!("  qe_identity_issuer_chain_size: policy={}, hardcoded={}", 
                                                policy_header.qe_identity_issuer_chain_size, hardcoded_header.qe_identity_issuer_chain_size);
                                        println!("  qe_identity_size: policy={}, hardcoded={}", 
                                                policy_header.qe_identity_size, hardcoded_header.qe_identity_size);
                                    }
                                }
                                
                                let mut collateral = COLLATERAL.lock().unwrap();
                                collateral.extend_from_slice(&packed_data);
                                println!("Successfully initialized collateral from policy data ({} bytes)", packed_data.len());
                                return;
                            }
                            Err(e) => {
                                println!("Error building packed collateral from policy: {}", e);
                            }
                        }
                    } else {
                        println!("Policy data found but contains no collateral section");
                    }
                }
                Err(e) => {
                    println!("Failed to parse policy data: {:?}", e);
                }
            }
        } else {
            println!("Policy data is not valid UTF-8");
        }
        
        println!("Policy-based collateral initialization failed");
    });
    
    // Return whether we successfully loaded policy collateral
    match COLLATERAL.lock() {
        Ok(collateral) => !collateral.is_empty(),
        Err(_) => false,
    }
}

/// Initialize collateral from standalone files for testing purposes
/// This is only used in test environments when migtd context is not available
#[cfg(any(test, feature = "AzCVMEmu"))]
pub fn init_collateral_from_files() {
    INIT.call_once(|| {
        let mut collateral = COLLATERAL.lock().unwrap();
        let mut loaded = false;
        
        // Try standalone TOML files first
        let toml_paths = [
            "collateral.toml",  // Current directory
            "src/policy/test/collateral.toml",  // Relative path from project root
            "/home/bodzhang/MigTD/src/policy/test/collateral.toml",  // Absolute path
        ];
        
        for path in &toml_paths {
            if let Some(toml_data) = load_collateral_from_toml(path) {
                collateral.extend_from_slice(&toml_data);
                println!("Initialized collateral from standalone TOML file: {}", path);
                loaded = true;
                break;
            }
        }
        
        // Also try loading from policy files as fallback
        if !loaded {
            if let Some(policy_data) = load_collateral_from_policy() {
                collateral.extend_from_slice(&policy_data);
                println!("Initialized collateral from policy file");
                loaded = true;
            }
        }
        
        if !loaded {
            println!("File-based collateral initialization failed, will use hardcoded fallback");
        }
    });
}

/// Set custom collateral data (useful for testing or runtime updates)
/// Returns true if successful, false otherwise
pub fn set_collateral_data(data: &[u8]) -> bool {
    match COLLATERAL.lock() {
        Ok(mut collateral) => {
            collateral.clear();
            collateral.extend_from_slice(data);
            true
        }
        Err(_) => false,
    }
}

/// Get the current collateral data size
pub fn get_collateral_size() -> usize {
    match COLLATERAL.lock() {
        Ok(collateral) => {
            if collateral.is_empty() {
                // Return hardcoded collateral size if COLLATERAL is empty
                HARDCODED_COLLATERAL.len()
            } else {
                collateral.len()
            }
        },
        Err(_) => HARDCODED_COLLATERAL.len(),
    }
}

/// Quote header structure for servtd_get_quote
#[repr(C)]
pub struct QuoteHeader {
    pub version: u64,
    pub status: u64,
    pub in_len: u32,
    pub out_len: u32,
    pub data: [u64; 0], // flexible array
}

/// Message header structure
#[repr(C)]
pub struct MsgHeader {
    pub major_version: u16,
    pub minor_version: u16,
    pub type_: u32,
    pub size: u32,
    pub error_code: u32,
}

/// Get collateral response structure
#[repr(C)]
pub struct GetCollateralResponse {
    pub header: MsgHeader,
    pub major_version: u16,
    pub minor_version: u16,
    pub pck_crl_issuer_chain_size: u32,
    pub root_ca_crl_size: u32,
    pub pck_crl_size: u32,
    pub tcb_info_issuer_chain_size: u32,
    pub tcb_info_size: u32,
    pub qe_identity_issuer_chain_size: u32,
    pub qe_identity_size: u32,
    pub collaterals: [u8; 0], // flexible array
}

/// Packed collateral structure
#[repr(C)]
pub struct PackedCollateral {
    pub major_version: u16,
    pub minor_version: u16,
    pub pck_crl_issuer_chain_size: u32,
    pub root_ca_crl_size: u32,
    pub pck_crl_size: u32,
    pub tcb_info_issuer_chain_size: u32,
    pub tcb_info_size: u32,
    pub qe_identity_issuer_chain_size: u32,
    pub qe_identity_size: u32,
    pub data: [u8; 0], // flexible array
}


/// Real implementation of servtd_get_quote (from mikbras/tdtools)
#[no_mangle]
pub unsafe extern "C" fn servtd_get_quote(blob: *mut QuoteHeader, _len: u64) -> i32 {
    // Validate input parameters
    if blob.is_null() {
        return -1;
    }

    let data = (*blob).data.as_ptr() as *mut u8;
    if data.is_null() {
        return -1;
    }

    // Skip 4 bytes for message size
    let rsp_ptr = data.add(4) as *mut GetCollateralResponse;

    let collateral = match COLLATERAL.lock() {
        Ok(collateral) => collateral,
        Err(_) => {
            return -1;
        }
    };
    
    // Use hardcoded collateral if COLLATERAL is empty (policy initialization failed)
    let collateral_data = if collateral.is_empty() {
        println!("Using hardcoded collateral (fallback)");
        &HARDCODED_COLLATERAL
    } else {
        collateral.as_slice()
    };

    // Validate that we have enough data for PackedCollateral structure
    if collateral_data.len() < size_of::<PackedCollateral>() {
        return -1;
    }

    // Read PackedCollateral from collateral data
    let pc_ptr = collateral_data.as_ptr() as *const PackedCollateral;
    let pc = &*pc_ptr;

    (*rsp_ptr).major_version = pc.major_version;
    (*rsp_ptr).minor_version = pc.minor_version;
    (*rsp_ptr).pck_crl_issuer_chain_size = pc.pck_crl_issuer_chain_size;
    (*rsp_ptr).root_ca_crl_size = pc.root_ca_crl_size;
    (*rsp_ptr).pck_crl_size = pc.pck_crl_size;
    (*rsp_ptr).tcb_info_issuer_chain_size = pc.tcb_info_issuer_chain_size;
    (*rsp_ptr).tcb_info_size = pc.tcb_info_size;
    (*rsp_ptr).qe_identity_issuer_chain_size = pc.qe_identity_issuer_chain_size;
    (*rsp_ptr).qe_identity_size = pc.qe_identity_size;

    let collaterals = collateral_data.as_ptr().add(size_of::<PackedCollateral>());
    let collaterals_size = collateral_data.len() - size_of::<PackedCollateral>();

    // Validate that the calculated message size won't overflow
    let msg_size = size_of::<GetCollateralResponse>().checked_add(collaterals_size);
    let msg_size = match msg_size {
        Some(size) => size,
        None => return -1, // Overflow detected
    };

    ptr::copy_nonoverlapping(
        collaterals,
        (*rsp_ptr).collaterals.as_ptr() as *mut u8,
        collaterals_size,
    );

    data.write(((msg_size >> 24) & 0xFF) as u8);
    data.add(1).write(((msg_size >> 16) & 0xFF) as u8);
    data.add(2).write(((msg_size >> 8) & 0xFF) as u8);
    data.add(3).write((msg_size & 0xFF) as u8);

    (*rsp_ptr).header.major_version = 1;
    (*rsp_ptr).header.minor_version = 0;
    (*rsp_ptr).header.type_ = 3;

    let extra = 2 * size_of::<u16>();
    let total_size = msg_size.checked_add(extra);
    let total_size = match total_size {
        Some(size) => size,
        None => return -1, // Overflow detected
    };
    
    (*rsp_ptr).header.size = total_size as u32;
    (*rsp_ptr).header.error_code = 0;

    (*blob).status = 0;
    let out_len = size_of::<u32>().checked_add(total_size);
    let out_len = match out_len {
        Some(len) => len,
        None => return -1, // Overflow detected
    };
    (*blob).out_len = out_len as u32;

    0
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_toml_loading() {
        // Test if TOML loading works
        let toml_paths = [
            "src/policy/test/collateral.toml",
            "/home/bodzhang/MigTD/src/policy/test/collateral.toml",
        ];
        
        let mut found = false;
        for path in &toml_paths {
            if let Some(data) = load_collateral_from_toml(path) {
                println!("Successfully loaded collateral from {}", path);
                println!("Data size: {} bytes", data.len());
                found = true;
                
                // Verify the data starts with the correct header
                if data.len() >= 4 {
                    let major_version = u16::from_le_bytes([data[0], data[1]]);
                    let minor_version = u16::from_le_bytes([data[2], data[3]]);
                    println!("Version: {}.{}", major_version, minor_version);
                    assert_eq!(major_version, 3);
                    assert_eq!(minor_version, 0);
                }
                break;
            }
        }
        
        if !found {
            println!("Note: No TOML file found, which is expected in a test environment");
        }
    }

    #[test]
    fn test_collateral_config_parsing() {
        // Test TOML parsing with a minimal config
        let toml_content = r#"
pck_crl_issuer_chain = "test_chain"
root_ca_crl = "test_crl"
pck_crl_size = 100
pck_crl = "test_pck_crl"
tcb_info_issuer_chain = "test_tcb_chain"
tcb_info = "test_tcb_info"
qe_identity_issuer_chain = "test_qe_chain"
qe_identity = "test_qe_identity"
"#;
        
        let config: CollateralConfig = toml::from_str(toml_content).expect("Failed to parse TOML");
        
        assert_eq!(config.major_version, None); // Should use default
        assert_eq!(config.minor_version, None); // Should use default
        assert_eq!(config.pck_crl_size, Some(100));
        assert_eq!(config.pck_crl_issuer_chain, "test_chain");
    }

    #[test]
    fn test_compare_toml_vs_hardcoded() {
        println!("=== Comparing TOML vs Hardcoded Collateral ===");
        
        // Try multiple potential paths for the TOML file
        let toml_paths = [
            "src/policy/test/collateral.toml",
            "./src/policy/test/collateral.toml",
            "/home/bodzhang/MigTD/src/policy/test/collateral.toml",
            "../../../src/policy/test/collateral.toml",
        ];
        
        let mut toml_collateral = None;
        for path in &toml_paths {
            if let Some(data) = load_collateral_from_toml(path) {
                println!("Successfully loaded TOML from: {}", path);
                toml_collateral = Some(data);
                break;
            }
        }
        
        if toml_collateral.is_none() {
            println!("Could not load TOML file from any of the attempted paths:");
            for path in &toml_paths {
                println!("  {}", path);
            }
            println!("Current working directory: {:?}", std::env::current_dir());
            return;
        }
        let toml_collateral = toml_collateral.unwrap();
        
        // Get hardcoded collateral
        let hardcoded_collateral = &HARDCODED_COLLATERAL;
        
        println!("TOML collateral size: {} bytes", toml_collateral.len());
        println!("Hardcoded collateral size: {} bytes", hardcoded_collateral.len());
        
        // Compare headers (first 32 bytes)
        let header_size = std::cmp::min(32, std::cmp::min(toml_collateral.len(), hardcoded_collateral.len()));
        println!("\n=== Header Comparison (first {} bytes) ===", header_size);
        
        for i in 0..header_size {
            let toml_byte = toml_collateral[i];
            let hardcoded_byte = hardcoded_collateral[i];
            if toml_byte != hardcoded_byte {
                println!("DIFF at byte {}: TOML=0x{:02x}, Hardcoded=0x{:02x}", i, toml_byte, hardcoded_byte);
            }
        }
        
        // Parse PackedCollateral header from both
        if toml_collateral.len() >= size_of::<PackedCollateral>() && hardcoded_collateral.len() >= size_of::<PackedCollateral>() {
            unsafe {
                let toml_pc = &*(toml_collateral.as_ptr() as *const PackedCollateral);
                let hardcoded_pc = &*(hardcoded_collateral.as_ptr() as *const PackedCollateral);
                
                println!("\n=== PackedCollateral Structure Comparison ===");
                println!("major_version: TOML={}, Hardcoded={}", toml_pc.major_version, hardcoded_pc.major_version);
                println!("minor_version: TOML={}, Hardcoded={}", toml_pc.minor_version, hardcoded_pc.minor_version);
                println!("pck_crl_issuer_chain_size: TOML={}, Hardcoded={}", toml_pc.pck_crl_issuer_chain_size, hardcoded_pc.pck_crl_issuer_chain_size);
                println!("root_ca_crl_size: TOML={}, Hardcoded={}", toml_pc.root_ca_crl_size, hardcoded_pc.root_ca_crl_size);
                println!("pck_crl_size: TOML={}, Hardcoded={}", toml_pc.pck_crl_size, hardcoded_pc.pck_crl_size);
                println!("tcb_info_issuer_chain_size: TOML={}, Hardcoded={}", toml_pc.tcb_info_issuer_chain_size, hardcoded_pc.tcb_info_issuer_chain_size);
                println!("tcb_info_size: TOML={}, Hardcoded={}", toml_pc.tcb_info_size, hardcoded_pc.tcb_info_size);
                println!("qe_identity_issuer_chain_size: TOML={}, Hardcoded={}", toml_pc.qe_identity_issuer_chain_size, hardcoded_pc.qe_identity_issuer_chain_size);
                println!("qe_identity_size: TOML={}, Hardcoded={}", toml_pc.qe_identity_size, hardcoded_pc.qe_identity_size);
            }
        }
        
        // Compare first 100 bytes of data section
        if toml_collateral.len() > size_of::<PackedCollateral>() && hardcoded_collateral.len() > size_of::<PackedCollateral>() {
            let data_start = size_of::<PackedCollateral>();
            let compare_len = std::cmp::min(100, std::cmp::min(
                toml_collateral.len() - data_start,
                hardcoded_collateral.len() - data_start
            ));
            
            println!("\n=== Data Section Comparison (first {} bytes) ===", compare_len);
            let mut diff_count = 0;
            for i in 0..compare_len {
                let toml_byte = toml_collateral[data_start + i];
                let hardcoded_byte = hardcoded_collateral[data_start + i];
                if toml_byte != hardcoded_byte {
                    if diff_count < 10 { // Limit output
                        println!("DIFF at data byte {}: TOML=0x{:02x}, Hardcoded=0x{:02x}", i, toml_byte, hardcoded_byte);
                    }
                    diff_count += 1;
                }
            }
            println!("Total differences in first {} data bytes: {}", compare_len, diff_count);
        }
    }

    #[test]
    fn test_debug_certificate_differences() {
        println!("=== Debug Certificate Differences ===");
        
        // Load TOML config
        let toml_result = load_collateral_from_toml("/home/bodzhang/MigTD/src/policy/test/collateral.toml");
        if toml_result.is_none() {
            println!("Could not load TOML file");
            return;
        }
        let toml_collateral = toml_result.unwrap();
        
        // Parse the hardcoded collateral to extract individual sections
        let hardcoded_collateral = &HARDCODED_COLLATERAL;
        
        if hardcoded_collateral.len() >= size_of::<PackedCollateral>() {
            unsafe {
                let hardcoded_pc = &*(hardcoded_collateral.as_ptr() as *const PackedCollateral);
                let data_start = size_of::<PackedCollateral>();
                let data_bytes = &hardcoded_collateral[data_start..];
                
                // Extract sections from hardcoded data
                let mut offset = 0;
                let pck_crl_issuer_chain_hardcoded = &data_bytes[offset..offset + hardcoded_pc.pck_crl_issuer_chain_size as usize];
                offset += hardcoded_pc.pck_crl_issuer_chain_size as usize;
                
                let root_ca_crl_hardcoded = &data_bytes[offset..offset + hardcoded_pc.root_ca_crl_size as usize];
                offset += hardcoded_pc.root_ca_crl_size as usize;
                
                let pck_crl_hardcoded = &data_bytes[offset..offset + hardcoded_pc.pck_crl_size as usize];
                
                // Load TOML and extract the first section (pck_crl_issuer_chain)
                let toml_content = fs::read_to_string("/home/bodzhang/MigTD/src/policy/test/collateral.toml").unwrap();
                let config: CollateralConfig = toml::from_str(&toml_content).unwrap();
                let pck_crl_issuer_chain_toml = config.pck_crl_issuer_chain.as_bytes();
                
                println!("PCK CRL Issuer Chain comparison:");
                println!("Hardcoded size: {}", hardcoded_pc.pck_crl_issuer_chain_size);
                println!("TOML size: {}", pck_crl_issuer_chain_toml.len());
                
                // Check the last few bytes of each
                println!("\nLast 10 bytes of hardcoded pck_crl_issuer_chain:");
                let start = pck_crl_issuer_chain_hardcoded.len().saturating_sub(10);
                for (i, &byte) in pck_crl_issuer_chain_hardcoded[start..].iter().enumerate() {
                    println!("  [{:2}]: 0x{:02x} ('{}')", start + i, byte, if byte.is_ascii_graphic() || byte == b' ' { byte as char } else { '.' });
                }
                
                println!("\nLast 10 bytes of TOML pck_crl_issuer_chain:");
                let start = pck_crl_issuer_chain_toml.len().saturating_sub(10);
                for (i, &byte) in pck_crl_issuer_chain_toml[start..].iter().enumerate() {
                    println!("  [{:2}]: 0x{:02x} ('{}')", start + i, byte, if byte.is_ascii_graphic() || byte == b' ' { byte as char } else { '.' });
                }
                
                // Check if TOML version is missing a trailing newline
                if pck_crl_issuer_chain_hardcoded.len() == pck_crl_issuer_chain_toml.len() + 1 {
                    let hardcoded_last = pck_crl_issuer_chain_hardcoded.last().copied().unwrap_or(0);
                    println!("\nHardcoded has 1 extra byte: 0x{:02x} ('{}')", hardcoded_last, if hardcoded_last.is_ascii_graphic() || hardcoded_last == b' ' { hardcoded_last as char } else { '.' });
                    if hardcoded_last == b'\n' {
                        println!("Missing trailing newline in TOML data!");
                    }
                }
            }
        }
    }

    #[test]
    fn test_quote_verification_with_toml() {
        println!("=== Testing Quote Verification with TOML Collateral ===");
        
        // Load TOML collateral directly
        let toml_collateral = load_collateral_from_toml("/home/bodzhang/MigTD/src/policy/test/collateral.toml");
        assert!(toml_collateral.is_some(), "Should be able to load TOML collateral");
        
        let collateral_data = toml_collateral.unwrap();
        
        // Clear existing collateral and set the TOML data
        {
            let mut collateral = COLLATERAL.lock().unwrap();
            collateral.clear();
            collateral.extend_from_slice(&collateral_data);
        }
        
        println!("Collateral loaded with {} bytes", collateral_data.len());
        
        // Verify it's the TOML version by checking that it's 13543 bytes
        assert_eq!(collateral_data.len(), 13543, "Should use TOML collateral (13543 bytes)");
        
        // Verify header structure
        if collateral_data.len() >= size_of::<PackedCollateral>() {
            unsafe {
                let pc = &*(collateral_data.as_ptr() as *const PackedCollateral);
                assert_eq!(pc.major_version, 3);
                assert_eq!(pc.minor_version, 0);
                println!("TOML collateral verified: version {}.{}, {} total bytes", 
                        pc.major_version, pc.minor_version, collateral_data.len());
            }
        }
        
        // Test that the collateral can be retrieved (but DON'T call get_collateral_size which calls init_collateral)
        let current_size = {
            let collateral = COLLATERAL.lock().unwrap();
            collateral.len()
        };
        println!("Current collateral size: {} bytes", current_size);
        assert_eq!(current_size, 13543, "Collateral should remain 13543 bytes");
    }

    #[test]
    fn test_byte_by_byte_comparison() {
        println!("=== Byte-by-Byte Comparison: TOML vs Policy.toml vs Hardcoded ===");
        
        // Load standalone TOML collateral
        let toml_result = load_collateral_from_toml("/home/bodzhang/MigTD/src/policy/test/collateral.toml");
        
        // Load policy.toml collateral
        let policy_result = load_collateral_from_policy();
        
        // Get hardcoded collateral
        let hardcoded_collateral = &HARDCODED_COLLATERAL;
        
        println!("Standalone TOML size: {} bytes", 
                if let Some(ref data) = toml_result { data.len() } else { 0 });
        println!("Policy.toml size: {} bytes", 
                if let Some(ref data) = policy_result { data.len() } else { 0 });
        println!("Hardcoded size: {} bytes", hardcoded_collateral.len());
        
        // Function to compare two collateral sources
        let compare_collaterals = |name1: &str, data1: &[u8], name2: &str, data2: &[u8]| -> bool {
            println!("\n--- Comparing {} vs {} ---", name1, name2);
            
            if data1.len() != data2.len() {
                println!("❌ Size mismatch: {} has {} bytes, {} has {} bytes", 
                        name1, data1.len(), name2, data2.len());
                return false;
            }
            
            let mut differences = Vec::new();
            let mut identical_count = 0;
            
            // Compare every byte
            for i in 0..data1.len() {
                let byte1 = data1[i];
                let byte2 = data2[i];
                
                if byte1 != byte2 {
                    differences.push((i, byte1, byte2));
                } else {
                    identical_count += 1;
                }
            }
            
            println!("Identical bytes: {}", identical_count);
            println!("Different bytes: {}", differences.len());
            
            if differences.is_empty() {
                println!("✅ PERFECT MATCH: All bytes are identical!");
                return true;
            } else {
                // Check if differences are only string termination differences (\n vs \0)
                let only_termination_diffs = differences.iter().all(|(_, byte1, byte2)| {
                    (*byte1 == b'\n' && *byte2 == b'\0') || (*byte1 == b'\0' && *byte2 == b'\n')
                });
                
                if only_termination_diffs {
                    println!("✅ ACCEPTABLE DIFFERENCES: Only string termination differences (\\n vs \\0)");
                    println!("Found {} string termination differences - this is expected between TOML and hardcoded formats", differences.len());
                    return true;
                }
                
                println!("❌ SIGNIFICANT DIFFERENCES FOUND:");
                
                // Show first 10 differences
                for (i, (offset, byte1, byte2)) in differences.iter().enumerate() {
                    if i >= 10 {
                        println!("... and {} more differences", differences.len() - 10);
                        break;
                    }
                    
                    let char1 = if byte1.is_ascii_graphic() || *byte1 == b' ' { 
                        *byte1 as char 
                    } else { 
                        '.' 
                    };
                    let char2 = if byte2.is_ascii_graphic() || *byte2 == b' ' { 
                        *byte2 as char 
                    } else { 
                        '.' 
                    };
                    
                    println!("  Byte {}: {}=0x{:02x}('{}') vs {}=0x{:02x}('{}')", 
                            offset, name1, byte1, char1, name2, byte2, char2);
                }
                
                // Analyze which sections have differences
                if data1.len() >= size_of::<PackedCollateral>() {
                    println!("\n=== Section Analysis ===");
                    unsafe {
                        let pc = &*(data1.as_ptr() as *const PackedCollateral);
                        let header_size = size_of::<PackedCollateral>();
                        
                        let mut offset = header_size;
                        let sections = [
                            ("pck_crl_issuer_chain", pc.pck_crl_issuer_chain_size as usize),
                            ("root_ca_crl", pc.root_ca_crl_size as usize),
                            ("pck_crl", pc.pck_crl_size as usize),
                            ("tcb_info_issuer_chain", pc.tcb_info_issuer_chain_size as usize),
                            ("tcb_info", pc.tcb_info_size as usize),
                            ("qe_identity_issuer_chain", pc.qe_identity_issuer_chain_size as usize),
                            ("qe_identity", pc.qe_identity_size as usize),
                        ];
                        
                        for (section_name, section_size) in sections.iter() {
                            let section_end = offset + section_size;
                            let section_diffs: Vec<_> = differences.iter()
                                .filter(|(diff_offset, _, _)| *diff_offset >= offset && *diff_offset < section_end)
                                .collect();
                            
                            if !section_diffs.is_empty() {
                                println!("Section '{}' (bytes {}-{}): {} differences", 
                                        section_name, offset, section_end - 1, section_diffs.len());
                                
                                // Show a sample of the data from each version
                                let sample_start = section_diffs[0].0;
                                let sample_end = std::cmp::min(sample_start + 50, section_end);
                                
                                println!("  Sample {}: {:?}", 
                                        name1, String::from_utf8_lossy(&data1[sample_start..sample_end]));
                                println!("  Sample {}: {:?}", 
                                        name2, String::from_utf8_lossy(&data2[sample_start..sample_end]));
                            }
                            
                            offset = section_end;
                        }
                    }
                }
                
                return false;
            }
        };
        
        let mut all_match = true;
        
        // Compare standalone TOML vs hardcoded
        if let Some(ref toml_data) = toml_result {
            if !compare_collaterals("Standalone TOML", toml_data, "Hardcoded", hardcoded_collateral) {
                all_match = false;
            }
        } else {
            println!("⚠️  Could not load standalone TOML file, skipping comparison");
        }
        
        // Compare policy.toml vs hardcoded
        if let Some(ref policy_data) = policy_result {
            if !compare_collaterals("Policy.toml", policy_data, "Hardcoded", hardcoded_collateral) {
                all_match = false;
            }
        } else {
            println!("⚠️  Could not load policy.toml collateral, skipping comparison");
        }
        
        // Compare standalone TOML vs policy.toml (if both available)
        if let (Some(ref toml_data), Some(ref policy_data)) = (&toml_result, &policy_result) {
            if !compare_collaterals("Standalone TOML", toml_data, "Policy.toml", policy_data) {
                all_match = false;
            }
        }
        
        // Final validation
        println!("\n=== Final Validation ===");
        if all_match && toml_result.is_some() && policy_result.is_some() {
            println!("✅ ALL COLLATERAL SOURCES MATCH PERFECTLY!");
        } else if all_match {
            println!("✅ Available collateral sources match");
        } else {
            println!("❌ COLLATERAL MISMATCHES DETECTED");
            println!("This suggests that the policy.toml collateral may be different from the expected hardcoded values.");
            println!("Quote verification may fail due to collateral inconsistencies.");
        }
        
        // Only fail the test if there are differences between available sources
        if !all_match {
            let mut error_msg = String::new();
            if toml_result.is_some() {
                error_msg.push_str("standalone TOML vs hardcoded, ");
            }
            if policy_result.is_some() {
                error_msg.push_str("policy.toml vs hardcoded, ");
            }
            if toml_result.is_some() && policy_result.is_some() {
                error_msg.push_str("standalone TOML vs policy.toml");
            }
            
            panic!("Found collateral differences between: {}", error_msg.trim_end_matches(", "));
        }
    }

    #[test]
    fn test_extract_hardcoded_to_toml() {
        println!("=== Extracting Hardcoded Data to TOML Format ===");
        
        let hardcoded_collateral = &HARDCODED_COLLATERAL;
        
        if hardcoded_collateral.len() < size_of::<PackedCollateral>() {
            println!("Error: Hardcoded data too small");
            return;
        }
        
        unsafe {
            let pc = &*(hardcoded_collateral.as_ptr() as *const PackedCollateral);
            let data_start = size_of::<PackedCollateral>();
            let data_bytes = &hardcoded_collateral[data_start..];
            
            // Extract sections
            let mut offset = 0;
            
            let pck_crl_issuer_chain_size = pc.pck_crl_issuer_chain_size as usize;
            let pck_crl_issuer_chain = &data_bytes[offset..offset + pck_crl_issuer_chain_size];
            offset += pck_crl_issuer_chain_size;
            
            let root_ca_crl_size = pc.root_ca_crl_size as usize;
            let root_ca_crl = &data_bytes[offset..offset + root_ca_crl_size];
            offset += root_ca_crl_size;
            
            let pck_crl_size = pc.pck_crl_size as usize;
            let pck_crl = &data_bytes[offset..offset + pck_crl_size];
            offset += pck_crl_size;
            
            let tcb_info_issuer_chain_size = pc.tcb_info_issuer_chain_size as usize;
            let tcb_info_issuer_chain = &data_bytes[offset..offset + tcb_info_issuer_chain_size];
            offset += tcb_info_issuer_chain_size;
            
            let tcb_info_size = pc.tcb_info_size as usize;
            let tcb_info = &data_bytes[offset..offset + tcb_info_size];
            offset += tcb_info_size;
            
            let qe_identity_issuer_chain_size = pc.qe_identity_issuer_chain_size as usize;
            let qe_identity_issuer_chain = &data_bytes[offset..offset + qe_identity_issuer_chain_size];
            offset += qe_identity_issuer_chain_size;
            
            let qe_identity_size = pc.qe_identity_size as usize;
            let qe_identity = &data_bytes[offset..offset + qe_identity_size];
            
            println!("Extracted sections:");
            println!("- pck_crl_issuer_chain: {} bytes", pck_crl_issuer_chain_size);
            println!("- root_ca_crl: {} bytes", root_ca_crl_size);
            println!("- pck_crl: {} bytes", pck_crl_size);
            println!("- tcb_info_issuer_chain: {} bytes", tcb_info_issuer_chain_size);
            println!("- tcb_info: {} bytes", tcb_info_size);
            println!("- qe_identity_issuer_chain: {} bytes", qe_identity_issuer_chain_size);
            println!("- qe_identity: {} bytes", qe_identity_size);
            
            // Generate TOML content
            let mut toml_content = String::new();
            toml_content.push_str(&format!("major_version = {}\n", pc.major_version));
            toml_content.push_str(&format!("minor_version = {}\n\n", pc.minor_version));
            
            // Remove null terminators and convert to string
            let clean_pck_crl_issuer_chain = if pck_crl_issuer_chain.ends_with(&[0]) {
                &pck_crl_issuer_chain[..pck_crl_issuer_chain.len()-1]
            } else {
                pck_crl_issuer_chain
            };
            
            let clean_root_ca_crl = if root_ca_crl.ends_with(&[0]) {
                &root_ca_crl[..root_ca_crl.len()-1]
            } else {
                root_ca_crl
            };
            
            let clean_pck_crl = if pck_crl.ends_with(&[0]) {
                &pck_crl[..pck_crl.len()-1]
            } else {
                pck_crl
            };
            
            let clean_tcb_info_issuer_chain = if tcb_info_issuer_chain.ends_with(&[0]) {
                &tcb_info_issuer_chain[..tcb_info_issuer_chain.len()-1]
            } else {
                tcb_info_issuer_chain
            };
            
            let clean_qe_identity_issuer_chain = if qe_identity_issuer_chain.ends_with(&[0]) {
                &qe_identity_issuer_chain[..qe_identity_issuer_chain.len()-1]
            } else {
                qe_identity_issuer_chain
            };
            
            toml_content.push_str("pck_crl_issuer_chain = \"\"\"\n");
            toml_content.push_str(&String::from_utf8_lossy(clean_pck_crl_issuer_chain));
            toml_content.push_str("\"\"\"\n\n");
            
            toml_content.push_str("root_ca_crl = \"\"\"\n");
            toml_content.push_str(&String::from_utf8_lossy(clean_root_ca_crl));
            toml_content.push_str("\"\"\"\n\n");
            
            toml_content.push_str(&format!("pck_crl_size = {}\n", pck_crl_size));
            toml_content.push_str("pck_crl = \"\"\"\n");
            toml_content.push_str(&String::from_utf8_lossy(clean_pck_crl));
            toml_content.push_str("\"\"\"\n\n");
            
            toml_content.push_str("tcb_info_issuer_chain = \"\"\"\n");
            toml_content.push_str(&String::from_utf8_lossy(clean_tcb_info_issuer_chain));
            toml_content.push_str("\"\"\"\n\n");
            
            toml_content.push_str("tcb_info = \"\"\"\n");
            toml_content.push_str(&String::from_utf8_lossy(tcb_info));
            toml_content.push_str("\"\"\"\n\n");
            
            toml_content.push_str("qe_identity_issuer_chain = \"\"\"\n");
            toml_content.push_str(&String::from_utf8_lossy(clean_qe_identity_issuer_chain));
            toml_content.push_str("\"\"\"\n\n");
            
            toml_content.push_str("qe_identity = \"\"\"\n");
            toml_content.push_str(&String::from_utf8_lossy(qe_identity));
            toml_content.push_str("\"\"\"\n");
            
            // Write to file
            if let Err(e) = std::fs::write("/home/bodzhang/MigTD/hardcoded_collateral.toml", &toml_content) {
                println!("Error writing TOML file: {}", e);
            } else {
                println!("Generated hardcoded_collateral.toml file");
            }
            
            // Test that the generated TOML produces identical data
            if let Ok(generated_config) = toml::from_str::<CollateralConfig>(&toml_content) {
                if let Ok(generated_data) = build_packed_collateral_from_toml(&generated_config) {
                    if generated_data == hardcoded_collateral {
                        println!("✅ Generated TOML produces identical data!");
                    } else {
                        println!("❌ Generated TOML produces different data (size: {})", generated_data.len());
                    }
                } else {
                    println!("Error building collateral from generated TOML");
                }
            } else {
                println!("Error parsing generated TOML");
            }
        }
    }
}

#[cfg(test)]
mod policy_collateral_tests {
    use super::*;

    #[test]
    fn test_load_collateral_from_policy() {
        println!("=== Testing Policy Collateral Loading ===");
        
        // Test our new function that loads collateral from policy files
        if let Some(policy_collateral) = load_collateral_from_policy() {
            println!("✅ Successfully loaded collateral from policy file!");
            println!("   Collateral size: {} bytes", policy_collateral.len());
            
            // Verify it's valid collateral data by checking the header
            if policy_collateral.len() >= 8 {
                let major_version = u16::from_le_bytes([policy_collateral[0], policy_collateral[1]]);
                let minor_version = u16::from_le_bytes([policy_collateral[2], policy_collateral[3]]);
                println!("   Version: {}.{}", major_version, minor_version);
                println!("✅ Policy collateral loading test passed!");
            } else {
                println!("❌ Collateral data too small to be valid");
            }
        } else {
            println!("⚠️  No collateral found in policy files");
            println!("   This is expected if policy.toml doesn't contain a [collateral] section");
        }
    }

    #[test]
    fn test_collateral_priority_system() {
        println!("=== Testing Collateral Priority System ===");
        
        // Clear any existing collateral state for this test
        // Note: We can't easily reset INIT.call_once(), so this test shows current behavior
        
        // Test that get_collateral_size() triggers initialization
        let size = get_collateral_size();
        println!("Current collateral size: {} bytes", size);
        
        // This should be > 0 since we should load either policy, TOML, or hardcoded data
        assert!(size > 0, "Collateral should be loaded from at least hardcoded data");
        
        println!("✅ Collateral priority system test passed!");
        println!("   Priority order: 1) Policy files  2) Standalone TOML  3) Hardcoded data");
    }

    #[test]
    fn test_init_collateral_from_policy_data() {
        println!("=== Testing init_collateral_from_policy with policy data ===");
        
        // Read the actual policy.toml content
        let policy_content = std::fs::read_to_string("/home/bodzhang/MigTD/config/policy.toml")
            .expect("Failed to read policy.toml");
        
        let policy_bytes = policy_content.as_bytes();
        
        // Test initialization from policy data
        let success = init_collateral_from_policy(policy_bytes);
        assert!(success, "init_collateral_from_policy should succeed");
        
        // Verify collateral was loaded
        let size = get_collateral_size();
        println!("Collateral initialized with {} bytes", size);
        assert!(size > 0, "Collateral should be loaded from policy data");
        
        println!("✅ Successfully initialized collateral from policy data!");
        
        // Test with invalid policy data
        let invalid_policy = b"invalid policy data";
        let success2 = init_collateral_from_policy(invalid_policy);
        assert!(success2, "Should still succeed and fall back to default initialization");
        
        println!("✅ Fallback to default initialization works correctly!");
    }
}

